<script>
    
    var hostUrl = "~/assets/";

    function showPasswordOnClick() {
        $('.showPassword').mousedown(function () {
            $('.passwordTextbox').attr('type', 'text');
        }).mouseup(function () {
            $('.passwordTextbox').attr('type', 'password');
        }).mouseout(function () {
            $('.passwordTextbox').attr('type', 'password');
        });
    }

    // LOADING SPINNER =============================================================================================================================================

    function showLoadingSpinner(message = null) {
        var loadSpinner = false;

        if ('@ViewBag.LoadClientSideValidation' == '')
            loadSpinner = true;
        else if ('@ViewBag.LoadClientSideValidation' != '') {
            if ('@ViewBag.LoadClientSideValidation' == 'True')
                if ($("form").valid())
                    loadSpinner = true;
        }

        if (loadSpinner) {
            if (message != null) $('#spinnerText').text(message);
            KTApp.showPageLoading();
        }
    }

    function hideLoadingSpinner(timer = false) {
        if (timer) {
            setTimeout(function () {
                KTApp.hidePageLoading();
            }, timer);
        } else {
            KTApp.hidePageLoading();
        }
    }

    // BOOTBOX =====================================================================================================================================================

    function showControllerMessage() { showMessage('@TempData["BootboxMessage"]'); }
    function showErrorMessage(message, idToSelectOnEscape) { showMessage(message, idToSelectOnEscape,"text-danger"); }
    function showMessage(message, idToSelectOnEscape, textcolor) {
        if (message !== '') {
            message = message.replaceAll("&lt;", "<").replaceAll("&gt;", ">");
            message = '<p class="text-center mb-0 '+textcolor+'">'+ message +'</p>';

            bootbox.dialog({ backdrop: true, closeButton: false, message: message , onEscape: function(){
                $('#Discount').select(); ////.select() is not working
            }});
        }
    }

    // DROPDOWNLIST ================================================================================================================================================

    function getMonthDropDownValue(start, change) {
        var startingMonth = parseInt(start);
        var changeMonth = parseInt(change);
        var newMonth = startingMonth + changeMonth;
        if (newMonth > 12) {
            newMonth -= 12;
        }
        else if (newMonth == 0) {
            newMonth += 12;
        }
        return newMonth;
    }

    function MonthsDropdownChange(id, action) {
        if (action == '@EnumActions.Previous.ToString()') {
            DropdownChange(id, getMonthDropDownValue($('#' + id).val(), -1));
        } else {
            DropdownChange(id, getMonthDropDownValue($('#' + id).val(), 1));
        }
    }

    function DropdownChange(id, value) {
        $('#' + id).val(value).trigger('change');
    }

    //for select2
    function setDDLSelectedValue(id, value) {
        $('#' + id).val(value).trigger('change');
    }

    function appendAndSetSelect2SelectedValue(id, text, value, emptyFirst) {
        if (emptyFirst == true)
            $('#' + id).empty();
        $('#' + id).append(new Option(text, value, false, false)).trigger('change');
    }

    function getDDLSelectedValue(id) {
        return $('#' + id + ' option:selected').val();
    }

    function getDDLSelectedText(id) {
        return $('#' + id + ' option:selected').text();
    }

    function getSelectedItem(ddlid, models) {
        var result = getSelectedItems(ddlid, models);
        if (result.length > 0)
            return result[0];
        else
            return null;
    }

    function getSelectedItems(ddlid, models) {
        var result = [];
        var selecteditems = $('#' + ddlid + ' option:selected').map(function () { return this.value; }).get();
        $.each(selecteditems, function (index, id) {
            $.each(models, function (index, item) {
                if (item.id == id) {
                    result.push(item);
                    return false;
                }
            });
        });
        return result;
    }

    // NAVIGATION MENU =============================================================================================================================================

    function activateNavigationMenu() {
        
        var array = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.ActiveNavigationMenus))');
        if(array != null) {
            for (var i = 0; i < array.length; i++) {
                $('#Menu_' + array[i]).addClass('active');
            }
        }
    }

    function setNavigationMenuVisibility() {
        // $('#navbar-navigation').children('ul:first').children('li').each(function (index) { //main menu
        //     var subMenu = $(this).children('div:first').children('div.dropdown-submenu'); //sub menu lvl 1

        //     recursivelySetSubmenuVisibility(subMenu);

        //     //hide main menu if has no children
        //     subMenu = $(this).children('div:first').children('div.dropdown-submenu');
        //     var notlabels = $(this).children('a:not(.dropdown-toggle)');
        //     var label = $(this).children('a.dropdown-toggle');
        //     var links = $(this).children('div:first').children('a');
        //     if (subMenu.length == 0 && ((notlabels.length == 0 && links.length == 0) || label == 1)) {
        //         $(this).remove();
        //     }
        // });
    }

    // GUID ========================================================================================================================================================

    function emptyGuid() { return '00000000-0000-0000-0000-000000000000'; }
    //generate random guid. Must replace in controller with correctly generated guid
    function generateRandomGuid() {
      return "10000000-1000-4000-8000-100000000000".replace(/[018]/g, c =>
            (+c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> +c / 4).toString(16)
          );
    }
    
    // DATE MANIPULATOR ============================================================================================================================================

    function parseJSONDate(value) {
        if (value == null)
            return null
        else
            return new Date(parseInt(value.replace("/Date(", "").replace(")/", ""), 10));
        //return new Date(parseInt((value).match(/\d+/)[0])); //returns incorrect date when json date value is negative. (negative when earlier than year 1970)
    }

    var monthNames = ["Jan", "Feb", "Mar", "Apr",
        "May", "Jun", "Jul", "Aug",
        "Sep", "Oct", "Nov", "Dec"];

    function formatDate(value, format) {
        var result = [];
        var date = "";
        var month = "";
        var year = "";

        var delimiter = getDateDelimiter(format);

        format = format.split(delimiter);
        for (i = 0; i < format.length; i++) {

            if (format[i] == 'dd') {
                result.push((('' + value.getDate()).length < 2 ? '0' : '') + value.getDate() + ' ');
            }

            if (format[i].includes('M')) {
                if (format[i] == 'MMM') {
                    month = monthNames[value.getMonth()];
                } else if (format[i] == 'MM') {
                    month = (('' + (value.getMonth() + 1)).length < 2 ? '0' : '') + (value.getMonth() + 1) + ' ';
                }
                result.push(month);
            }

            if (format[i] == 'yyyy')
                result.push(value.getFullYear());
            else if (format[i] == 'yy')
                result.push(value.getFullYear().toString().substr(-2));

            if (format[i] == 'HH')
                result.push(padLeft(value.getHours(), format[i].length, "0"));

            if (format[i] == 'mm')
                result.push(padLeft(value.getMinutes(), format[i].length, "0"));

            if (format[i] == 'ss')
                result.push(padLeft(value.getSeconds(), format[i].length, "0"));
        }

        var finalResult = result.filter(Boolean).join(delimiter);
        if (delimiter != ' ')
            finalResult = finalResult.replaceAll(' ', '');

        return finalResult;
    }

    function getDateDelimiter(value) {
        if (value.split(" ").length > 1)
            return " ";
        else if (value.split("-").length > 1)
            return "-";
        else if (value.split("/").length > 1)
            return "/";
        else if (value.split(":").length > 1)
            return ":";
    }

    function addMonths(date, value) {
        var d = date.getDate();
        date.setMonth(date.getMonth() + +value);
        if (date.getDate() != d) {
            date.setDate(0);
        }
        return date;
    }

    function utcAsLocal(date) {
        if (isNotValidDate(date)) {
            return null;
        }

        return new Date(
            date.getUTCFullYear(),
            date.getUTCMonth(),
            date.getUTCDate(),
            date.getUTCHours(),
            date.getUTCMinutes(),
            date.getUTCSeconds(),
            date.getUTCMilliseconds()
        );
    }

    function localAsUtc(date) {
        if (isNotValidDate(date)) {
            return null;
        }

        return new Date(Date.UTC(
            date.getFullYear(),
            date.getMonth(),
            date.getDate(),
            date.getHours(),
            date.getMinutes(),
            date.getSeconds(),
            date.getMilliseconds()
        ));
    }

    function isValidDate(date) {
        return !isNotValidDate(date);
    }

    function isNotValidDate(date) {
        return date == null || isNaN(date.getTime());
    }

    function applyFlatpickr() {
        if ($('.flatpickr').length > 0)
            $('.flatpickr').flatpickr();
    }
    
    // POPOVERS ====================================================================================================================================================

    //use data-container:'.modal-body' for modals and data-container:'body' everywhere else
    function applyPopovers() {
        $('[data-toggle="popover"]').popover({
            html: true,
            trigger: 'hover',
            delay: { hide: 700 }
        });
    }

    // ACTIVITY LOGS ===============================================================================================================================================

    function Log(id) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("Ajax_GetLog", "ActivityLogs")',
            data: {
                ReferenceId: id
            },
            success: function (data) {
                bootbox.dialog({
                    title: 'Log',
                    size: 'large',
                    message: data.content,
                    backdrop: true,
                    onEscape: true
                }).off("shown.bs.modal"); //scroll to top
            }, //end success
            error: function (result) {
                bootbox.alert({ backdrop: true, message: "Error " + result });
            } //end error
        }); //end ajax
    }

    // DATATABLES PLUGIN ===========================================================================================================================================
    // Init datatable --- more info on datatables: https://datatables.net/manual/
    var datatable;
    function applyDatatablesPluginToAll() { applyDatatablesPlugin(".datatable"); }
    function applyDatatablesPlugin(selectorName) {
        if ($(selectorName).length > 0) {
            datatable = $(selectorName).DataTable({
                info: true,
                order: [],
                pageLength: 10,
                paging: true,
                lengthChange: true,
                sPaginationType: "simple_numbers",
                columnDefs: [
                    { searchable: false, targets: "non-searchable" },
                    { orderable: false, targets: "non-sortable" }
                ],
                fixedHeader: {
                    header: true,
                    headerOffset: 75
                },
                language: {
                    emptyTable: "Gunakan keyword atau FILTER dan tekan tombol LOAD untuk menampilkan data",
                    lengthMenu: " Rows _MENU_",
                    search: '<div class="d-flex align-items-center"><i class="ki-solid ki-magnifier fs-3">&nbsp;</i>_INPUT_</div>',
                    searchPlaceholder: 'quick search',
                    info: 'Showing _START_ to _END_ of total _TOTAL_'
                },
                dom:
                    '<"d-flex align-items-center justify-content-between"<f><"d-flex align-items-center"pl>>' +
                    '<""t>' +
                    '<"d-flex align-items-center justify-content-between"<i><"d-flex align-items-center"pl>>',
                bStateSave: true,
                stateSaveCallback: function (settings, data) {
                    localStorage.setItem('DataTables_' + settings.sInstance, JSON.stringify(data))
                },
                stateLoadCallback: function (settings) {
                    return JSON.parse(localStorage.getItem('DataTables_' + settings.sInstance))
                },
                stateLoadParams: function (settings, data) {
                    if ($("#removeDatatablesStateSave").text() == "1") {
                        data.search.search = "";
                        data.start = 0;
                    }
                },
            });
        }
    }

    // TEXTBOX =====================================================================================================================================================

    function getValueString(id) {
        return trim($('#' + id).val());
    }

    function trim(value) { return $.trim(value); }

    function getValueInt(id) {
        return parseInt(getDefaultIfEmpty($('#' + id).val(), 0));
    }

    function getValueFloat(id) {
        return parseFloat(convertFormattedStringToFloat(getDefaultIfEmpty(getValueString(id), 0)));
    }

    function setValue(id, value) { $('#' + id).val(value); }

    function setText(id, value) { $('#' + id).text(value); }

    function resetListbox(id) { $('#' + id).val('').trigger('change'); }

    function setToZeroIfEmpty(control) {
        $(control).val(getDefaultIfEmpty($(control).val(), 0));
        if ($(control).val() == 0)
            $(control).select();
    }

    function getDefaultIfEmpty(value, defaultValue) {
        if (value == '')
            return defaultValue;
        else
            return value;
    }

    function applyEventsToInputTextboxes() {
        //45 = minus sign
        //46 = dot sign
        //48-57 = 0-9

        $('.numericonly').bind('keypress', function (e) {
            return event.charCode == 45 || event.charCode == 46 || (event.charCode >= 48 && event.charCode <= 57);
        });

        $('.positivenumericonly').bind('keypress', function (e) {
            return event.charCode == 46 || (event.charCode >= 48 && event.charCode <= 57);
        }).bind('keyup', function (e) { setToZeroIfEmpty($(this)); });

        $('.integeronly').bind('keypress', function (e) {
            return event.charCode == 45 || (event.charCode >= 48 && event.charCode <= 57);
        });

        $('.positiveintegeronly').bind('keypress', function (e) {
            return (event.charCode >= 48 && event.charCode <= 57);
        }).bind('keyup', function (e) { setToZeroIfEmpty($(this)); });

        //doesn't work for input with type='number' because it cannot have comma
        //}).bind('keyup', function (e) { $(this).val(formatN0($(this).val())); });

        //allow editing text after initial select all on focus
        $('input').on('focus', function (e) {
            $(this)
                .one('mouseup', function () {
                    $(this).select();
                    return false;
                })
                .select();
        });
    }

    function selectFirstInput() {
        $('form:not(.filter) :input:not([readonly]):visible:enabled:first').select(); //select content of first visible and enabled control
    }

    //format string to N0
    function formatN0(value1, value2, value3) {
        return sum(value1, value2, value3).toLocaleString();
    }

    function sum(value1, value2, value3) {
        if (value1 == null || value1 == "")
            value1 = 0;

        if (value2 == null || value2 == "")
            value2 = 0;

        if (value3 == null || value3 == "")
            value3 = 0;

        if (!$.isNumeric(value1))
            value1 = convertFormattedStringToInt(value1);
        if (!$.isNumeric(value2))
            value1 = convertFormattedStringToInt(value2);
        if (!$.isNumeric(value3))
            value1 = convertFormattedStringToInt(value3);

        return parseInt(value1) + parseInt(value2) + parseInt(value3);
    }

    function convertFormattedStringToInt(value) {
        if(value == null) 
            return 0;
        else
            return parseInt(value.replace(/,/g, ''));
    }

    function convertFormattedStringToFloat(value) {
        return parseFloat(value.replace(/,/g, ''));
    }

    // BUTTONS =====================================================================================================================================================

    function performClickButton(id) {
        $('#' + id).trigger('click');
    }

    // AJAX ========================================================================================================================================================

    function AjaxExecute(action, controller, param1, callbackfunction, onEscapeFunction) {
        var url = '@Url.Action("__action", "__controller")';
        url = url.replace("__action", action).replace("__controller", controller);
        $.ajax({
            type: "POST", url: url, data: { param1: param1 },
            success: function (data) {
                if (data.Message != '')
                    bootbox.dialog({ backdrop: true, message: data.Message, onEscape: function () { if (onEscapeFunction != null) onEscapeFunction(); } });

                if (callbackfunction != null)
                    callbackfunction();
            },
            error: function (result) { bootbox.alert({ backdrop: true, message: "Error " + result }); }
        });
    }

    function AjaxUpdate(action, controller, id, value, executeIfHasNoMessage) {
        var url = '@Url.Action("__action", "__controller")';
        url = url.replace("__action", action).replace("__controller", controller);
        $.ajax({
            type: "POST", url: url, data: { id: id, value: value },
            success: function (data) {
                if (data.Message != '') {
                    bootbox.alert({ backdrop: true, message: data.Message });
                } else {
                    executeIfHasNoMessage();
                }
            },
            error: function (result) { bootbox.alert({ backdrop: true, message: "Error " + result }); }
        });
    }

    function AjaxDelete(action, controller, id, executeIfSuccess) {
        var url = '@Url.Action("__action", "__controller")';
        url = url.replace("__action", action).replace("__controller", controller);
        $.ajax({
            type: "POST", url: url, data: { id: id },
            success: function (data) {
                if (data.Message != '') {
                    bootbox.alert({ backdrop: true, message: data.Message });
                } else {
                    executeIfSuccess();
                }
            },
            error: function (result) { bootbox.alert({ backdrop: true, message: "Error " + result }); }
        });
    }

    function AjaxGet(id, title, size, action, controller) {
        var url = '@Url.Action("__action", "__controller")';
        url = url.replace("__action", action).replace("__controller", controller);
        $.ajax({
            type: "POST", url: url, data: { id: id },
            success: function (data) { bootbox.dialog({ backdrop: true, onEscape: true, title: title, size: size, message: data.content }); },
            error: function (result) { bootbox.alert({ backdrop: true, message: "Error " + result }); }
        });
    }

    function AjaxAssignValue(controlid, action, controller, id) {
        var url = '@Url.Action("__action", "__controller")';
        url = url.replace("__action", action).replace("__controller", controller);
        $.ajax({
            type: "POST", url: url, data: { id: id },
            success: function (data) { setValue(controlid, data.content); },
            error: function (result) { bootbox.alert({ backdrop: true, message: "Error " + result }); }
        });
    }

    function AjaxGetDropdownlistData(id, action, controller, key) {
        var url = '@Url.Action("__action", "__controller")';
        url = url.replace("__action", action).replace("__controller", controller);
        $('#'+id).select2({
            placeholder: 'Please Select',
            ajax: {
                url: url,
                data: function (params) {
                    var query = {
                        keyword: params.term,
                        page: params.page || 1,
                        take: 20,
                        key: key
                    }
                    return query;
                },
            }
        });
    }

    // CHECKBOXES ==================================================================================================================================================

    function setCheckboxState(id, value) {
        if (value == 'True')
            value = true;
        else if (value == 'False')
            value = false;

        $('#' + id).prop('checked', value);
    }

    function setSwitcheryState(id, value) {
        if (value == 'True' || value == true)
            value = false;
        else if (value == 'False' || value == false)
            value = true;

        $('#' + id).prop('checked', value).trigger("click");
    }

    function applyCheckboxStyling() {
        $('.check-styled').uniform();
        $('.check-styled-info').uniform({
            wrapperClass: 'border-info-600 text-info-800'
        });
        $('.check-styled-danger').uniform({
            wrapperClass: 'border-danger-600 text-danger-800'
        });
    }

    function getCheckboxValue(id) {
        return $('#' + id).prop('checked');
    }

    function toggleCheckboxValue(id) {
        if (getCheckboxValue(id))
            setCheckboxState(id, false);
        else
            setCheckboxState(id, true);
    }

    function getSelectedCheckboxesId(datatablebody, checkboxClassname) {
        var idList = '';
        $('#' + datatablebody + ' tr').find('.' + checkboxClassname).each(function () {
            if ($(this).prop('checked') == true) {
                idList = $('input:checkbox.' + checkboxClassname + ':checked').map(function () {
                    return this.id;
                }).get();
            }
        });
        return idList;
    }

    // URL HANDLERS ================================================================================================================================================
    
    function Action(action, controller, newwindow, returnurl) {
        if (newwindow == false)
            showLoadingSpinner();
        var url = '@Url.Action("__action", "__controller")';
        ProcessAction(url, action, controller, newwindow, returnurl)
    }

    function ActionWithId(id, action, controller, newwindow, returnurl) {
        if(newwindow == false)
            showLoadingSpinner();
        var url = '@Url.Action("__action", "__controller", new { id = "__data" })';
        url = url.replace("__data", id);
        ProcessAction(url, action, controller, newwindow, returnurl)
    }

    function ProcessAction(url, action, controller, newwindow, returnurl) {
        url = url.replace("__action", action).replace("__controller", controller);
        if (returnurl != undefined)
            url += "&ReturnUrl=" + returnurl;
        if (newwindow == null)
            newwindow = "false";
        OpenWindow(url, newwindow);
    }

    function OpenWindow(url, opennewwindow) {
        if (opennewwindow == "true")
            window.open(url, '_blank');
        else
            window.location.href = url;
    }

    // =============================================================================================================================================================

    function disableDivElements(id, value) {
        $('#' + id + ' :input').attr("disabled", value);
    }

    function disableElement(id, value) {
        $('#' + id).prop('disabled', value);
    }

    function disableIfChecked(control, targetId) {
        disableElement(targetId, control.checked);
    }

    function disableIdIfChecked(id, targetId) {
        disableIfChecked($('#' + id)[0], targetId);
    }

    function enableIfChecked(control, targetId) {
        disableElement(targetId, !control.checked);
    }

    function enableIdIfChecked(id, targetId) {
        enableIfChecked($('#' + id)[0], targetId);
    }

    function resetElementValue(id, value) {
        if (value == null)
        {
            //value = document.getElementById(id).defaultValue;
            value = "";
        }
            
        document.getElementById(id).value = value;
    }

    $(document).ready(function () {

        // Frame-busting to prevent site from being loaded within a frame without permission (click-jacking)
        if (window.top != window.self) {
            window.top.location.replace(window.self.location.href);
        }

        // // Fix for error in browser console "The connection to wss://localhost:44302/iSpeakCore/ was interrupted while the page was loading""
        // $(window).on('beforeunload', function(){
        //     socket.close();
        // });

        applyFlatpickr();
        applyDatatablesPluginToAll();
        applyPopovers();
        setNavigationMenuVisibility();
        showPasswordOnClick();
        selectFirstInput();

        applyEventsToInputTextboxes(); //call here so it is executed initially

        if (typeof applyLast !== 'undefined' && $.isFunction(applyLast)) applyLast();
        
        activateNavigationMenu(); //selectFirstInput() does not work if placed after this statement

        showControllerMessage();
    });

</script>