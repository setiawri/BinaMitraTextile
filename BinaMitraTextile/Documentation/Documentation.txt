CREATE TABLE [dbo].[VendorInvoicePayments]
(
	[Id] UNIQUEIDENTIFIER NOT NULL PRIMARY KEY, 
    [Timestamp] DATETIME NOT NULL, 
    [Vendors_Id] UNIQUEIDENTIFIER NOT NULL, 
    [Cancelled] BIT NOT NULL DEFAULT (0),
    [Approved] BIT NOT NULL DEFAULT (0),
    [Notes] VARCHAR(MAX) NULL
)
GO
CREATE TABLE [dbo].[VendorInvoicePaymentItems]
(
	[Id] UNIQUEIDENTIFIER NOT NULL PRIMARY KEY, 
    [VendorInvoicePayments_Id] UNIQUEIDENTIFIER NOT NULL, 
    [VendorInvoices_Id] UNIQUEIDENTIFIER NOT NULL, 
    [Amount] DECIMAL(12) NOT NULL
)
GO
ALTER TABLE VendorInvoicePaymentItems ADD Notes varchar(MAX)
GO
ALTER TABLE VendorInvoicePayments ADD No varchar(MAX) NOT NULL
GO
CREATE PROCEDURE [dbo].[VendorInvoicePayments_add]

	@Id uniqueidentifier,
	@Timestamp datetime,
	@Vendors_Id uniqueidentifier,
	@Notes varchar(MAX)

AS

BEGIN

	-- INCREMENT LAST HEX NUMBER
	DECLARE @HexLength int = 5, @LastHex_String varchar(5), @NewNo varchar(5)
	SELECT @LastHex_String = ISNULL(MAX(No),'') From VendorInvoicePayments	
	EXEC UTIL_IncrementHex @HexLength, @LastHex_String, @NewNo OUTPUT

	INSERT INTO VendorInvoicePayments(Id,Timestamp,Vendors_Id,No,Notes) 
	VALUES(@Id,@Timestamp,@Vendors_Id,@NewNo,@Notes)

END
GO
CREATE PROCEDURE [dbo].[VendorInvoicePayments_update]

	@Id uniqueidentifier,
	@Timestamp datetime,
	@Notes varchar(MAX)

AS

BEGIN

	UPDATE VendorInvoicePayments
	SET Timestamp = @Timestamp,
		Notes = @Notes
	WHERE Id = @Id

END
GO
CREATE PROCEDURE [dbo].[VendorInvoicePayments_update_Approved]

	@Id uniqueidentifier,
	@Approved bit

AS

BEGIN

	UPDATE VendorInvoicePayments
	SET Approved = @Approved
	WHERE Id = @Id

END
GO
CREATE PROCEDURE [dbo].[VendorInvoicePayments_update_Cancelled]

	@Id uniqueidentifier,
	@Cancelled bit

AS

BEGIN

	UPDATE VendorInvoicePayments
	SET Cancelled = @Cancelled
	WHERE Id = @Id

END
GO
CREATE PROCEDURE [dbo].[VendorInvoicePayments_get]

	@Id uniqueidentifier = NULL,
	@No varchar(MAX) = NULL,
	@FILTER_ShowOnlyLast3Months bit = 0,
	@FILTER_ShowOnlyUnapproved bit = 0

AS

BEGIN

	SELECT VendorInvoicePayments.*,
		Vendors.vendor_name AS Vendors_Name,
		VendorInvoicePaymentItems.TotalAmount AS Amount
	FROM VendorInvoicePayments
		LEFT OUTER JOIN Vendors ON Vendors.id = VendorInvoicePayments.Vendors_Id
		LEFT OUTER JOIN (
				SELECT VendorInvoicePaymentItems.VendorInvoicePayments_Id, SUM(VendorInvoicePaymentItems.Amount) AS TotalAmount
				FROM VendorInvoicePaymentItems
					LEFT OUTER JOIN VendorInvoicePayments ON VendorInvoicePayments.Id = VendorInvoicePaymentItems.VendorInvoicePayments_Id
				WHERE VendorInvoicePayments.Cancelled = 0
				GROUP BY VendorInvoicePaymentItems.VendorInvoicePayments_Id
			) VendorInvoicePaymentItems ON VendorInvoicePaymentItems.VendorInvoicePayments_Id = VendorInvoicePayments.Id
	WHERE 1=1
		AND (@Id IS NULL OR VendorInvoicePayments.Id = @Id)
		AND (@No IS NULL OR VendorInvoicePayments.No LIKE '%'+@No+'%')
		AND (@FILTER_ShowOnlyLast3Months = 0 OR (@FILTER_ShowOnlyLast3Months = 1 AND VendorInvoicePayments.Timestamp > DATEADD(month, -3, GETDATE())))
		AND (@FILTER_ShowOnlyUnapproved = 0 OR (@FILTER_ShowOnlyUnapproved = 1 AND VendorInvoicePayments.Approved = 0))
	ORDER BY VendorInvoicePayments.No DESC

END
GO
CREATE PROCEDURE [dbo].[VendorInvoicePaymentItems_add]

	@Id uniqueidentifier,
	@VendorInvoicePayments_Id uniqueidentifier,
	@VendorInvoices_Id uniqueidentifier,
	@Amount decimal(13,2)

AS

BEGIN

	INSERT INTO VendorInvoicePaymentItems(Id, VendorInvoicePayments_Id, VendorInvoices_Id, Amount) 
	VALUES(NEWID(),@VendorInvoicePayments_Id,@VendorInvoices_Id,@Amount)
	
END
GO
CREATE PROCEDURE [dbo].[VendorInvoicePaymentItems_get]

	@Id uniqueidentifier = NULL,
	@VendorInvoicePayments_Id uniqueidentifier = NULL

AS

BEGIN

	SELECT VendorInvoicePaymentItems.*,
		VendorInvoices.invoice_no AS VendorInvoices_No
	FROM VendorInvoicePaymentItems
		LEFT OUTER JOIN VendorInvoices ON VendorInvoices.id = VendorInvoicePaymentItems.VendorInvoices_Id
	WHERE 1=1
		AND (@Id IS NULL OR VendorInvoicePaymentItems.Id = @Id)
		AND (@VendorInvoicePayments_Id IS NULL OR VendorInvoicePaymentItems.VendorInvoicePayments_Id = @VendorInvoicePayments_Id)
	ORDER BY VendorInvoices.invoice_no ASC

END
GO
ALTER PROCEDURE [dbo].[vendorinvoice_get]
	
	@id uniqueidentifier = NULL, 
	@invoice_no varchar(MAX) = NULL,
	@FakturPajaks_Id uniqueidentifier = NULL,
	@Vendors_Id uniqueidentifier = NULL,
	@FILTER_BrowsingForFakturPajak_Vendors_Id uniqueidentifier = NULL,
	@FILTER_ShowOnlyIncomplete bit = 0,
	@FILTER_ShowOnlyLast3Months bit = 0,
	@status_completed tinyint,
	@status_cancelled tinyint,
	@FILTER_ShowOnlyVendorUsesFakturPajak bit = 0
	
AS

BEGIN

	SELECT VendorInvoices.*,
		Vendors.vendor_name AS VendorName,
		FakturPajaks.No AS FakturPajaks_No,
		FakturPajaks.DPP + FakturPajaks.PPN AS FakturPajaks_Amount,
		VendorInvoices.Amount - (FakturPajaks.DPP + FakturPajaks.PPN) AS AmountDifferenceFromFakturPajaksAmount,
		DATEADD(day, 3 + VendorInvoices.[TOP], VendorInvoices.timestamp) AS pastdue,
		CAST(CASE WHEN DATEADD(day, 3 + VendorInvoices.[TOP], VendorInvoices.timestamp) < CURRENT_TIMESTAMP THEN 1 ELSE 0 END AS BIT) AS is_due,
		CompiledInventory.Amount AS CalculatedAmount,		
		VendorInvoices.Amount - COALESCE(CompiledInventory.Amount,0) AS AmountDifferenceFromCalculated,
		COALESCE(ReturnedToSupplier.Amount,0) AS ReturnedValue,
		VendorInvoices.Amount - COALESCE(ReturnedToSupplier.Amount,0) AS PayableAmount,
		CASE
			WHEN CAST(CASE WHEN DATEADD(day, 3 + VendorInvoices.[TOP], VendorInvoices.timestamp) < CURRENT_TIMESTAMP THEN 1 ELSE 0 END AS BIT) = 1 
				THEN VendorInvoices.Amount - COALESCE(ReturnedToSupplier.Amount,0) - COALESCE(PaidVendorInvoices.Amount,0)
			ELSE 0
		END AS PaymentAmount,
		CASE
			WHEN status_enum_id = 0 THEN 'New'
			WHEN status_enum_id = 1 THEN 'Cancelled'
			WHEN status_enum_id = 2 THEN 'Paid Partial'
			WHEN status_enum_id = 3 THEN 'Paid Full'
		END AS status_name
	FROM VendorInvoices
		LEFT OUTER JOIN Vendors ON Vendors.id = VendorInvoices.Vendors_Id
		LEFT OUTER JOIN FakturPajaks ON FakturPajaks.Id = VendorInvoices.FakturPajaks_Id
		LEFT OUTER JOIN (		
				SELECT Inventory.vendorinvoice_id, SUM(CompiledInventoryBuyValue.Amount) AS Amount
				FROM (
						SELECT CompiledInventoryItems.inventory_id, CompiledInventoryItems.total_length * Inventory.buy_price AS Amount
						FROM (
								SELECT InventoryItems.inventory_id, SUM(InventoryItems.item_length) AS total_length
								FROM InventoryItems
									LEFT OUTER JOIN Inventory ON Inventory.id = InventoryItems.inventory_id
									LEFT OUTER JOIN VendorInvoices ON VendorInvoices.id = Inventory.vendorinvoice_id
								WHERE 1=1
									AND (@id IS NULL OR Inventory.vendorinvoice_id = @id)
									AND (@invoice_no IS NULL OR VendorInvoices.invoice_no LIKE '%' + @invoice_no + '%')
									AND (@FakturPajaks_Id IS NULL OR VendorInvoices.FakturPajaks_Id = @FakturPajaks_Id)
								GROUP BY InventoryItems.inventory_id
							) CompiledInventoryItems
							LEFT OUTER JOIN Inventory ON Inventory.id = CompiledInventoryItems.inventory_id
					) CompiledInventoryBuyValue
					LEFT OUTER JOIN Inventory ON Inventory.id = CompiledInventoryBuyValue.inventory_id
				GROUP BY Inventory.vendorinvoice_id
			) CompiledInventory ON CompiledInventory.vendorinvoice_id = VendorInvoices.id
		LEFT OUTER JOIN (
				SELECT VendorInvoices.id,
					SUM(Inventory.buy_price * InventoryItems.item_length) AS buy_amount,
					SUM((SaleItems.sell_price + SaleItems.adjustment) * InventoryItems.item_length) AS Amount,
					COUNT(InventoryItems.item_length) AS sale_qty,
					SUM(InventoryItems.item_length) AS sale_length
				FROM SaleItems
					LEFT OUTER JOIN Sales ON Sales.id = SaleItems.sale_id
					LEFT OUTER JOIN InventoryItems ON InventoryItems.id = SaleItems.inventory_item_id
					LEFT OUTER JOIN Inventory ON Inventory.id = InventoryItems.inventory_id
					LEFT OUTER JOIN VendorInvoices ON VendorInvoices.id = Inventory.vendorinvoice_id
				WHERE Sales.returned_to_supplier = 1 AND Sales.voided = 0
				GROUP BY VendorInvoices.id
			) ReturnedToSupplier ON ReturnedToSupplier.id = VendorInvoices.id
		LEFT OUTER JOIN (
				SELECT VendorInvoicePaymentItems.VendorInvoices_Id, SUM(VendorInvoicePaymentItems.Amount) AS Amount
				FROM VendorInvoicePaymentItems
					LEFT OUTER JOIN VendorInvoicePayments ON VendorInvoicePayments.Id = VendorInvoicePaymentItems.VendorInvoicePayments_Id
				WHERE VendorInvoicePayments.Cancelled = 0
				GROUP BY VendorInvoicePaymentItems.VendorInvoices_Id
			) PaidVendorInvoices ON PaidVendorInvoices.VendorInvoices_Id = VendorInvoices.id
	WHERE 1=1
		AND (@id IS NULL OR VendorInvoices.id = @id)
		AND (@invoice_no IS NULL OR VendorInvoices.invoice_no LIKE '%' + @invoice_no + '%')
		AND (@FakturPajaks_Id IS NULL OR VendorInvoices.FakturPajaks_Id = @FakturPajaks_Id)
		AND (@Vendors_Id IS NULL OR VendorInvoices.Vendors_Id = @Vendors_Id)
		AND (@FILTER_BrowsingForFakturPajak_Vendors_Id IS NULL OR (VendorInvoices.FakturPajaks_Id IS NULL AND VendorInvoices.Vendors_Id = @FILTER_BrowsingForFakturPajak_Vendors_Id))
		AND (@FILTER_ShowOnlyIncomplete = 0 OR (@FILTER_ShowOnlyIncomplete = 1 AND VendorInvoices.status_enum_id <> @status_cancelled AND VendorInvoices.status_enum_id <> @status_completed))
		AND (@FILTER_ShowOnlyLast3Months = 0 OR (@FILTER_ShowOnlyLast3Months = 1 AND VendorInvoices.timestamp > DATEADD(month, -3, GETDATE())))
		AND (@FILTER_ShowOnlyVendorUsesFakturPajak = 0 OR (@FILTER_ShowOnlyVendorUsesFakturPajak = 1 AND Vendors.usesFakturPajak = 1))
	ORDER BY VendorInvoices.invoice_no DESC

END
GO





