-- DELETE SP sale_update_returnedtosupplier_by_id
-- DELETE column returned_to_supplier in table Sales


ALTER PROCEDURE [dbo].[sale_getall]
	
	@date_start datetime = NULL, 
	@date_end datetime = NULL,
	@inventory_item_id uniqueidentifier = NULL, 
	@customer_id uniqueidentifier = NULL,
	@Vendors_Id uniqueidentifier = NULL,
	@sale_id uniqueidentifier = NULL,
	@FakturPajaks_Id uniqueidentifier = NULL,
	@only_has_receivable bit,
	@only_loss_profit bit,
	@include_special_user_only bit,
	@SaleCommission_Users_Id uniqueidentifier = NULL,	
	@productstorename_id_list AS Array READONLY,
	@color_id_list AS Array READONLY,
	@FILTER_OnlyReturnedToSupplier bit = 0,
	@FILTER_OnlyNotCompleted bit = 0,
	@FILTER_Inventory_Code varchar(MAX) = NULL,
	@FILTER_OnlyManualAdjustment bit = 0,
	@FILTER_BrowsingForFakturPajak_Customers_Id uniqueidentifier = NULL,
	@FILTER_BrowsingForFakturPajak_Vendors_Id uniqueidentifier = NULL,
	@FILTER_VendorInvoices_Id uniqueidentifier = NULL

AS

BEGIN
 
	SELECT Sales.*, RIGHT(CONVERT(NVARCHAR(10), CONVERT(VARBINARY(8), Sales.barcode), 1),5) AS hexbarcode,
			Vendors.vendor_name AS Vendors_Name,
			Customers.customer_name AS customer_name,
			CustomerTerms.DebtLimit AS CustomerTerms_DebtLimit,
			CustomerTerms.TermDays AS CustomerTerms_TermDays,
			CustomerTerms.TermDays - DATEDIFF(day, time_stamp, CURRENT_TIMESTAMP) AS RemainingTermDays,
			Transports.name AS transport_name,
			FakturPajaks.Id AS FakturPajaks_Id,
			FakturPajaks.No AS FakturPajaks_No,
			SaleItems.sale_amount AS sale_amount,
			SaleItems.sale_qty AS sale_qty,
			SaleItems.sale_length AS sale_length,
			COALESCE(SaleItems.sale_amount,0) - COALESCE(SaleItems.buy_amount,0) AS profit,
			IIF(COALESCE(SaleItems.buy_amount,0) = 0,1,(COALESCE(SaleItems.sale_amount,0) - COALESCE(SaleItems.buy_amount,0)) / COALESCE(SaleItems.buy_amount,0)) * 100 AS profit_percent,
			COALESCE(CompiledPayments.payment_amount,0) AS payment_amount,
			CASE
				WHEN Sales.Vendors_Id IS NOT NULL THEN 0
				ELSE COALESCE(SaleItems.sale_amount,0) - COALESCE(CompiledPayments.payment_amount,0) + COALESCE(Sales.shipping_cost, 0)
			END AS receivable_amount,
			DATEDIFF(day, time_stamp, CURRENT_TIMESTAMP) AS days_elapsed,
			COALESCE(ReturnedItems.amount,0) AS returned_amount,
			(CASE WHEN AdjustedSaleItems.sale_id IS NOT NULL THEN 1 ELSE 0 END) AS isManualAdjustment,
			SaleCommission.username AS SaleCommission_Users_Name,
			COALESCE(SaleItems.CommissionAmount,0) AS CommissionAmount
	FROM Sales 
		LEFT OUTER JOIN Vendors ON Vendors.id = Sales.Vendors_Id
		LEFT OUTER JOIN Customers ON Customers.id = Sales.customer_id
		LEFT OUTER JOIN CustomerTerms ON CustomerTerms.Customers_Id = Customers.id
		LEFT OUTER JOIN Users SaleCommission ON SaleCommission.id = Sales.SaleCommission_Users_Id
		LEFT OUTER JOIN Transports ON Transports.id = Sales.transport_id
		LEFT OUTER JOIN FakturPajaks ON FakturPajaks.Id = Sales.FakturPajaks_Id
		LEFT OUTER JOIN (
			SELECT SaleItems.sale_id,
					SUM(Inventory.buy_price * InventoryItems.item_length) AS buy_amount,
					SUM((SaleItems.sell_price + SaleItems.adjustment) * InventoryItems.item_length) AS sale_amount,
					COUNT(InventoryItems.item_length) AS sale_qty,
					SUM(InventoryItems.item_length) AS sale_length,
					SUM(ISNULL(SaleItems.CommissionAmount,0)) AS CommissionAmount 
			FROM SaleItems
				LEFT OUTER JOIN InventoryItems ON InventoryItems.id = SaleItems.inventory_item_id
				LEFT OUTER JOIN Inventory ON Inventory.id = InventoryItems.inventory_id
			WHERE 1=1			
				AND (@FILTER_VendorInvoices_Id IS NULL OR (Inventory.id IN (SELECT Inventory.id FROM Inventory WHERE Inventory.vendorinvoice_id = @FILTER_VendorInvoices_Id)))
			GROUP BY SaleItems.sale_id
			) SaleItems ON SaleItems.sale_id = Sales.id
		LEFT OUTER JOIN (
			SELECT DISTINCT(SaleItems.sale_id)
			FROM SaleItems
			WHERE SaleItems.isManualAdjustment = 1
			) AdjustedSaleItems ON AdjustedSaleItems.sale_id = Sales.id
		LEFT OUTER JOIN (
			SELECT SaleItems.sale_id,
					SUM((SaleItems.sell_price + SaleItems.adjustment) * InventoryItems.item_length) AS amount,
					COUNT(InventoryItems.item_length) AS qty,
					SUM(InventoryItems.item_length) AS length
			FROM SaleItems
				LEFT OUTER JOIN InventoryItems ON InventoryItems.id = SaleItems.inventory_item_id
				LEFT OUTER JOIN Inventory ON Inventory.id = InventoryItems.inventory_id
			WHERE SaleItems.return_id IS NOT NULL
			GROUP BY SaleItems.sale_id
			) ReturnedItems ON ReturnedItems.sale_id = Sales.id
		LEFT OUTER JOIN (SELECT Payments.ReferenceId, 
								SUM(Payments.Amount) AS payment_amount 
							FROM Payments GROUP BY Payments.ReferenceId) CompiledPayments 
		ON CompiledPayments.ReferenceId = Sales.id
	WHERE 1=1
		AND (@date_start IS NULL OR time_stamp > @date_start)
		AND (@date_end IS NULL OR time_stamp < @date_end)
		AND (@inventory_item_id IS NULL OR Sales.id IN (SELECT sale_id FROM SaleItems WHERE inventory_item_id = @inventory_item_id))
		AND (@customer_id IS NULL OR customer_id = @customer_id)
		AND (@Vendors_Id IS NULL OR Sales.Vendors_Id = @Vendors_Id)
		AND (@sale_id IS NULL OR Sales.id = @sale_id)
		AND (@only_has_receivable = 0 OR (COALESCE(SaleItems.sale_amount,0) + COALESCE(Sales.shipping_cost, 0) - COALESCE(ReturnedItems.amount, 0) - COALESCE(CompiledPayments.payment_amount,0) > 0 AND Sales.Vendors_Id IS NULL))
		AND (@only_loss_profit = 0 OR (COALESCE(SaleItems.sale_amount,0) - COALESCE(SaleItems.buy_amount,0) <= 0 AND Sales.Vendors_ID IS NULL))
		AND (@include_special_user_only = 1 OR (@include_special_user_only = 0 AND special_user_only = 0))
		AND (@FILTER_OnlyNotCompleted = 0 OR Sales.completed = 0)
		AND (@FILTER_OnlyManualAdjustment = 0 OR AdjustedSaleItems.sale_id IS NOT NULL)
		AND (@FILTER_Inventory_Code IS NULL OR Sales.id IN (
					SELECT DISTINCT(SaleItems.sale_id)
					FROM SaleItems
					WHERE SaleItems.inventory_item_id IN (
							SELECT InventoryItems.id
							FROM InventoryItems 
								LEFT OUTER JOIN Inventory ON Inventory.id = InventoryItems.inventory_id
							WHERE Inventory.code = CONVERT(INT, @FILTER_Inventory_Code)
						)
				)
			)
		AND (@FILTER_OnlyReturnedToSupplier = 0 OR (@FILTER_OnlyReturnedToSupplier = 1 AND Sales.Vendors_Id IS NOT NULL))
		AND (@SaleCommission_Users_Id IS NULL OR Sales.SaleCommission_Users_Id = @SaleCommission_Users_Id)
		AND ((SELECT COUNT(value_str) FROM @productstorename_id_list) = 0 
				OR Sales.id in (
					SELECT DISTINCT(SaleItems.sale_id) 
					FROM SaleItems 
						LEFT OUTER JOIN InventoryItems ON InventoryItems.id = SaleItems.inventory_item_id
						LEFT OUTER JOIN Inventory ON Inventory.id = InventoryItems.inventory_id
						LEFT OUTER JOIN Products ON Products.id = Inventory.product_id
						LEFT OUTER JOIN ProductStoreNames ON ProductStoreNames.id = Products.store_name_id
					WHERE ProductStoreNames.id IN (SELECT value_str FROM @productstorename_id_list)
						AND (@date_start IS NULL OR time_stamp > @date_start)
						AND (@date_end IS NULL OR time_stamp < @date_end)
				))
		AND ((SELECT COUNT(value_str) FROM @color_id_list) = 0 
				OR Sales.id in (
					SELECT DISTINCT(SaleItems.sale_id) 
					FROM SaleItems 
						LEFT OUTER JOIN InventoryItems ON InventoryItems.id = SaleItems.inventory_item_id
						LEFT OUTER JOIN Inventory ON Inventory.id = InventoryItems.inventory_id
					WHERE Inventory.color_id IN (SELECT value_str FROM @color_id_list)
						AND (@date_start IS NULL OR time_stamp > @date_start)
						AND (@date_end IS NULL OR time_stamp < @date_end)
				))
		AND (@FakturPajaks_Id IS NULL OR (Sales.FakturPajaks_Id = @FakturPajaks_Id))
		AND (@FILTER_BrowsingForFakturPajak_Customers_Id IS NULL OR (Sales.FakturPajaks_Id IS NULL AND Sales.customer_id = @FILTER_BrowsingForFakturPajak_Customers_Id))
		AND (@FILTER_BrowsingForFakturPajak_Vendors_Id IS NULL OR (Sales.FakturPajaks_Id IS NULL AND Sales.Vendors_Id = @FILTER_BrowsingForFakturPajak_Vendors_Id))
		AND (@FILTER_VendorInvoices_Id IS NULL OR (Sales.Vendors_Id IS NOT NULL AND Sales.id IN (
				SELECT SaleItems.sale_id
				FROM SaleItems
					LEFT OUTER JOIN InventoryItems ON InventoryItems.id = SaleItems.inventory_item_id
					LEFT OUTER JOIN Inventory ON Inventory.id = InventoryItems.inventory_id
				WHERE Inventory.vendorinvoice_id =@FILTER_VendorInvoices_Id
			)))

END
GO
ALTER PROCEDURE [dbo].[sale_new]

	@id uniqueidentifier, 
	@time_stamp datetime,
	@voided bit,
	@customer_id uniqueidentifier = NULL,
	@Vendors_Id uniqueidentifier = NULL,
	@customer_info varchar(MAX),
	@user_id uniqueidentifier,
	@notes varchar(MAX) = NULL,
	@transport_id uniqueidentifier = NULL,
	@shipping_cost decimal, 
	@return_value int OUTPUT
AS

BEGIN

	-- INCREMENT LAST HEX NUMBER
	DECLARE @HexLength int = 5, @LastHex_String varchar(5), @NewNo varchar(5)
	SELECT @LastHex_String = ISNULL(MAX(hexbarcode),'') From Sales	
	EXEC UTIL_IncrementHex @HexLength, @LastHex_String, @NewNo OUTPUT

	INSERT INTO Sales(id,hexbarcode,time_stamp,voided,customer_id,Vendors_Id,customer_info,user_id,notes,transport_id, shipping_cost, SaleCommission_Users_Id) 
					VALUES(@id,@NewNo,@time_stamp,@voided,@customer_id,@Vendors_Id,@customer_info,@user_id,@notes,@transport_id, @shipping_cost, (SELECT Customers.sales_user_id FROM Customers WHERE Customers.id=@customer_id))
    SET @return_value=SCOPE_IDENTITY()
END
GO
ALTER PROCEDURE [dbo].[vendorinvoice_get]
	
	@id uniqueidentifier = NULL, 
	@invoice_no varchar(MAX) = NULL,
	@FakturPajaks_Id uniqueidentifier = NULL,
	@Vendors_Id uniqueidentifier = NULL,
	@FILTER_BrowsingForFakturPajak_Vendors_Id uniqueidentifier = NULL,
	@FILTER_ShowOnlyIncomplete bit = 0,
	@FILTER_ShowOnlyLast3Months bit = 0,
	@FILTER_ShowOnlyVendorUsesFakturPajak bit = 0
	
AS

BEGIN

	SELECT VendorInvoices.*,
		Vendors.vendor_name AS VendorName,
		FakturPajaks.No AS FakturPajaks_No,
		FakturPajaks.DPP + FakturPajaks.PPN AS FakturPajaks_Amount,
		VendorInvoices.Amount - (FakturPajaks.DPP + FakturPajaks.PPN) AS AmountDifferenceFromFakturPajaksAmount,
		DATEDIFF(day, DATEADD(day, VendorInvoices.[TOP], VendorInvoices.timestamp), CURRENT_TIMESTAMP) AS DaysPastDue,
		CAST(
			CASE 
				WHEN 
					VendorInvoices.Amount - COALESCE(ReturnedToSupplier.Amount,0) - COALESCE(PaidVendorInvoices.Amount,0) <> 0
					AND DATEADD(day, VendorInvoices.[TOP], VendorInvoices.timestamp) < CURRENT_TIMESTAMP 
						THEN 1 
				ELSE 0 
			END 
		AS BIT) AS is_due,
		CompiledInventory.Amount AS CalculatedAmount,		
		VendorInvoices.Amount - COALESCE(CompiledInventory.Amount,0) AS AmountDifferenceFromCalculated,
		COALESCE(ReturnedToSupplier.Amount,0) AS ReturnedValue,
		CASE
			WHEN VendorInvoices.Amount = 0 THEN 0
			ELSE VendorInvoices.Amount - COALESCE(ReturnedToSupplier.Amount,0) - COALESCE(PaidVendorInvoices.Amount,0)
		END AS PayableAmount,
		COALESCE(PaidVendorInvoices.Amount,0) AS PaidAmount,
		CASE
			WHEN CAST(CASE WHEN DATEADD(day, VendorInvoices.[TOP], VendorInvoices.timestamp) < CURRENT_TIMESTAMP THEN 1 ELSE 0 END AS BIT) = 1 
				THEN VendorInvoices.Amount - COALESCE(ReturnedToSupplier.Amount,0) - COALESCE(PaidVendorInvoices.Amount,0)
			ELSE 0
		END AS PaymentAmount
	FROM VendorInvoices
		LEFT OUTER JOIN Vendors ON Vendors.id = VendorInvoices.Vendors_Id
		LEFT OUTER JOIN FakturPajaks ON FakturPajaks.Id = VendorInvoices.FakturPajaks_Id
		LEFT OUTER JOIN (		
				SELECT Inventory.vendorinvoice_id, SUM(CompiledInventoryBuyValue.Amount) AS Amount
				FROM (
						SELECT CompiledInventoryItems.inventory_id, CompiledInventoryItems.total_length * Inventory.buy_price AS Amount
						FROM (
								SELECT InventoryItems.inventory_id, SUM(InventoryItems.item_length) AS total_length
								FROM InventoryItems
									LEFT OUTER JOIN Inventory ON Inventory.id = InventoryItems.inventory_id
									LEFT OUTER JOIN VendorInvoices ON VendorInvoices.id = Inventory.vendorinvoice_id
								WHERE 1=1
									AND (@id IS NULL OR Inventory.vendorinvoice_id = @id)
									AND (@invoice_no IS NULL OR VendorInvoices.invoice_no LIKE '%' + @invoice_no + '%')
									AND (@FakturPajaks_Id IS NULL OR VendorInvoices.FakturPajaks_Id = @FakturPajaks_Id)
								GROUP BY InventoryItems.inventory_id
							) CompiledInventoryItems
							LEFT OUTER JOIN Inventory ON Inventory.id = CompiledInventoryItems.inventory_id
					) CompiledInventoryBuyValue
					LEFT OUTER JOIN Inventory ON Inventory.id = CompiledInventoryBuyValue.inventory_id
				GROUP BY Inventory.vendorinvoice_id
			) CompiledInventory ON CompiledInventory.vendorinvoice_id = VendorInvoices.id
		LEFT OUTER JOIN (
				SELECT VendorInvoices.id,
					SUM(Inventory.buy_price * InventoryItems.item_length) AS buy_amount,
					SUM((SaleItems.sell_price + SaleItems.adjustment) * InventoryItems.item_length) AS Amount,
					COUNT(InventoryItems.item_length) AS sale_qty,
					SUM(InventoryItems.item_length) AS sale_length
				FROM SaleItems
					LEFT OUTER JOIN Sales ON Sales.id = SaleItems.sale_id
					LEFT OUTER JOIN InventoryItems ON InventoryItems.id = SaleItems.inventory_item_id
					LEFT OUTER JOIN Inventory ON Inventory.id = InventoryItems.inventory_id
					LEFT OUTER JOIN VendorInvoices ON VendorInvoices.id = Inventory.vendorinvoice_id
				WHERE Sales.Vendors_Id IS NOT NULL AND Sales.voided = 0
				GROUP BY VendorInvoices.id
			) ReturnedToSupplier ON ReturnedToSupplier.id = VendorInvoices.id
		LEFT OUTER JOIN (
				SELECT VendorInvoicePaymentItems.VendorInvoices_Id, SUM(VendorInvoicePaymentItems.Amount) AS Amount
				FROM VendorInvoicePaymentItems
					LEFT OUTER JOIN VendorInvoicePayments ON VendorInvoicePayments.Id = VendorInvoicePaymentItems.VendorInvoicePayments_Id
				WHERE VendorInvoicePayments.Cancelled = 0
				GROUP BY VendorInvoicePaymentItems.VendorInvoices_Id
			) PaidVendorInvoices ON PaidVendorInvoices.VendorInvoices_Id = VendorInvoices.id
	WHERE 1=1
		AND (@id IS NULL OR VendorInvoices.id = @id)
		AND (@invoice_no IS NULL OR VendorInvoices.invoice_no LIKE '%' + @invoice_no + '%')
		AND (@FakturPajaks_Id IS NULL OR VendorInvoices.FakturPajaks_Id = @FakturPajaks_Id)
		AND (@Vendors_Id IS NULL OR VendorInvoices.Vendors_Id = @Vendors_Id)
		AND (@FILTER_BrowsingForFakturPajak_Vendors_Id IS NULL OR (VendorInvoices.FakturPajaks_Id IS NULL AND VendorInvoices.Vendors_Id = @FILTER_BrowsingForFakturPajak_Vendors_Id))
		AND (@FILTER_ShowOnlyIncomplete = 0 OR (@FILTER_ShowOnlyIncomplete = 1 AND VendorInvoices.Approved = 0))
		AND (@FILTER_ShowOnlyLast3Months = 0 OR (@FILTER_ShowOnlyLast3Months = 1 AND VendorInvoices.timestamp > DATEADD(month, -3, GETDATE())))
		AND (@FILTER_ShowOnlyVendorUsesFakturPajak = 0 OR (@FILTER_ShowOnlyVendorUsesFakturPajak = 1 AND Vendors.usesFakturPajak = 1))
	ORDER BY VendorInvoices.timestamp DESC, VendorInvoices.invoice_no DESC

END
GO
ALTER PROCEDURE [dbo].[SaleOrderItems_get]

	@Id uniqueidentifier NULL,
	@SaleOrders_Id uniqueidentifier NULL,
	@FILTER_Customers_Id uniqueidentifier NULL,
	@FILTER_StatusCompleted tinyint,
	@FILTER_StatusCancelled tinyint,
	@FILTER_ShowIncompleteOnly bit

AS

BEGIN

	-- drop table if already exists
	IF(SELECT object_id('TempDB..#TEMP_ReceivedPOItem')) IS NOT NULL
		DROP TABLE #TEMP_ReceivedPOItem
		
	SELECT * INTO #TEMP_ReceivedPOItem FROM (
			SELECT Inventory.po_item_id, SUM(InventoryItems.item_length) AS total_length
			FROM InventoryItems
				LEFT OUTER JOIN Inventory ON Inventory.id = InventoryItems.inventory_id
			WHERE Inventory.po_item_id IS NOT NULL 
				AND InventoryItems.id NOT IN (
					SELECT inventory_item_id 
					FROM SaleItems 
						LEFT OUTER JOIN Sales ON Sales.id = SaleItems.sale_id 
					WHERE Sales.Vendors_Id IS NOT NULL)
			GROUP BY Inventory.po_item_id
	) AS x
	
	SELECT SaleOrderItems.*,
		SaleOrders.Timestamp AS Timestamp,
		SaleOrders.Customers_Id AS Customers_Id,
		SaleOrders.CustomerPONo AS CustomerPONo,
		Customers.customer_name AS CustomerName,
		COALESCE(Qty,0) * COALESCE(PricePerUnit,0) AS subtotal,
		DATEDIFF(DAY, SaleOrders.Timestamp, CURRENT_TIMESTAMP) AS Age,
		Qty - COALESCE(ShippedInventoryItems.TotalQty,0) - COALESCE(BookedInventoryItems.TotalQty,0) AS RemainingQty,
		COALESCE(ShippedInventoryItems.TotalQty,0) AS ShippedQty,
		COALESCE(BookedInventoryItems.TotalQty,0) AS BookedQty,
		COALESCE(POItems.TotalQty,0) AS POQty,
		COALESCE(POItems.POPendingQty,0) AS POPendingQty,
		'' AS StatusName
	FROM SaleOrderItems 
		LEFT OUTER JOIN SaleOrders ON SaleOrders.id = SaleOrderItems.SaleOrders_Id
		LEFT OUTER JOIN Customers ON Customers.id = SaleOrders.Customers_Id
		LEFT OUTER JOIN (
				SELECT POItems.SaleOrderItems_Id, 
					SUM(POItems.qty) AS TotalQty, 
					SUM(POItems.qty) - SUM(COALESCE(#TEMP_ReceivedPOItem.total_length,0)) AS POPendingQty
				FROM POItems
					LEFT OUTER JOIN #TEMP_ReceivedPOItem ON #TEMP_ReceivedPOItem.po_item_id = POItems.id
				WHERE SaleOrderItems_Id IS NOT NULL
				GROUP BY POItems.SaleOrderItems_Id
			) POItems ON POItems.SaleOrderItems_Id = SaleOrderItems.Id
		LEFT OUTER JOIN (
				SELECT InventoryItems.SaleOrderItems_Id, SUM(InventoryItems.item_length) AS TotalQty
				FROM InventoryItems
					LEFT OUTER JOIN (
							SELECT inventory_item_id, isSold=1 
							FROM SaleItems 
							WHERE return_id IS NULL
						) SoldItems ON SoldItems.inventory_item_id = InventoryItems.id
				WHERE SaleOrderItems_Id IS NOT NULL AND SoldItems.isSold IS NULL
				GROUP BY InventoryItems.SaleOrderItems_Id
			) BookedInventoryItems ON BookedInventoryItems.SaleOrderItems_Id = SaleOrderItems.Id
		LEFT OUTER JOIN (
				SELECT InventoryItems.SaleOrderItems_Id, SUM(InventoryItems.item_length) AS TotalQty
				FROM InventoryItems
					LEFT OUTER JOIN (
							SELECT inventory_item_id, isSold=1 
							FROM SaleItems 
							WHERE return_id IS NULL
						) SoldItems ON SoldItems.inventory_item_id = InventoryItems.id
				WHERE SaleOrderItems_Id IS NOT NULL AND SoldItems.isSold IS NOT NULL
				GROUP BY InventoryItems.SaleOrderItems_Id
			) ShippedInventoryItems ON ShippedInventoryItems.SaleOrderItems_Id = SaleOrderItems.Id
	WHERE 1=1
		AND (@Id IS NULL OR SaleOrders.Id = @Id)
		AND (@SaleOrders_Id IS NULL OR SaleOrderItems.SaleOrders_Id = @SaleOrders_Id)
		AND (@FILTER_Customers_Id IS NULL OR SaleOrders.Customers_Id = @FILTER_Customers_Id)
		AND (@FILTER_ShowIncompleteOnly = 0 
			OR (SaleOrderItems.status_enum_id <> @FILTER_StatusCompleted 
					AND SaleOrderItems.status_enum_id <> @FILTER_StatusCancelled
				)
			)
	ORDER BY Timestamp ASC, SaleOrders_Id ASC, [LineNo] ASC

	-- clean up
	DROP TABLE #TEMP_ReceivedPOItem

END
GO
ALTER PROCEDURE [dbo].[sale_charting_detailbysales]

	@date_start datetime = NULL, 
	@date_end datetime = NULL,
	@exclude_customer_id uniqueidentifier = NULL,
	@customer_id_list AS Array READONLY,
	@length_unitid_list AS Array READONLY,
	@colorid_list AS Array READONLY,
	@grade_id_list AS Array READONLY,
	@product_storenameid_list AS Array READONLY,
	@product_widthid_list AS Array READONLY,
	@is_reported_only AS bit = 0

AS

BEGIN
 
	SELECT Sales.id AS sale_id, Sales.time_stamp, RIGHT(CONVERT(NVARCHAR(10), CONVERT(VARBINARY(8), Sales.barcode), 1),5) AS barcode,
			Customers.customer_name AS customer_name,
			SaleItems.sale_amount AS sale_amount,
			SaleItems.sale_pcs AS sale_pcs,
			SaleItems.sale_length AS sale_length,
			COALESCE(SaleItems.sale_amount,0) - COALESCE(SaleItems.buy_amount,0) AS profit,
			IIF(COALESCE(SaleItems.buy_amount,0) = 0,1,(COALESCE(SaleItems.sale_amount,0) - COALESCE(SaleItems.buy_amount,0)) / COALESCE(SaleItems.buy_amount,0)) * 100 AS profit_percent
	FROM Sales 
		LEFT OUTER JOIN Customers ON Customers.id = Sales.customer_id
		LEFT OUTER JOIN Transports ON Transports.id = Sales.transport_id
		LEFT OUTER JOIN (
			SELECT SaleItems.sale_id,
					SUM(Inventory.buy_price * InventoryItems.item_length) AS buy_amount,
					SUM((SaleItems.sell_price + SaleItems.adjustment) * InventoryItems.item_length) AS sale_amount,
					COUNT(InventoryItems.item_length) AS sale_pcs,
					SUM(InventoryItems.item_length) AS sale_length
			FROM SaleItems
				LEFT OUTER JOIN InventoryItems ON InventoryItems.id = SaleItems.inventory_item_id
				LEFT OUTER JOIN Inventory ON Inventory.id = InventoryItems.inventory_id
				LEFT OUTER JOIN Products ON Products.id = Inventory.product_id
			WHERE return_id IS NULL 
				AND ((SELECT COUNT(value_str) FROM @length_unitid_list) = 0 OR Inventory.length_unit_id IN (SELECT value_str FROM @length_unitid_list))
				AND ((SELECT COUNT(value_str) FROM @colorid_list) = 0 OR Inventory.color_id IN (SELECT value_str FROM @colorid_list))
				AND ((SELECT COUNT(value_str) FROM @grade_id_list) = 0 OR Inventory.grade_id IN (SELECT value_str FROM @grade_id_list))
				AND ((SELECT COUNT(value_str) FROM @product_storenameid_list) = 0 OR Products.store_name_id IN (SELECT value_str FROM @product_storenameid_list))
				AND ((SELECT COUNT(value_str) FROM @product_widthid_list) = 0 OR Inventory.product_width_id IN (SELECT value_str FROM @product_widthid_list))
			GROUP BY SaleItems.sale_id
			) SaleItems ON SaleItems.sale_id = Sales.id
	WHERE 1=1
		AND Sales.Vendors_Id IS NULL
		AND (@date_start IS NULL OR Sales.time_stamp > @date_start)
		AND (@date_end IS NULL OR Sales.time_stamp < @date_end)
		AND ((SELECT COUNT(value_str) FROM @customer_id_list) = 0 OR Sales.customer_id IN (SELECT value_str FROM @customer_id_list))
		AND (@exclude_customer_id IS NULL OR Sales.customer_id <> @exclude_customer_id)
		AND (@is_reported_only = 0 OR (@is_reported_only = 1 AND Sales.is_reported = 1))
		AND Sales.id IN (
				SELECT DISTINCT(SaleItems.sale_id)
				FROM SaleItems
					LEFT OUTER JOIN InventoryItems ON InventoryItems.id = SaleItems.inventory_item_id
					LEFT OUTER JOIN Inventory ON Inventory.id = InventoryItems.inventory_id
					LEFT OUTER JOIN Products ON Products.id = Inventory.product_id
				WHERE return_id IS NULL 
					AND ((SELECT COUNT(value_str) FROM @length_unitid_list) = 0 OR Inventory.length_unit_id IN (SELECT value_str FROM @length_unitid_list))
					AND ((SELECT COUNT(value_str) FROM @colorid_list) = 0 OR Inventory.color_id IN (SELECT value_str FROM @colorid_list))
					AND ((SELECT COUNT(value_str) FROM @product_widthid_list) = 0 OR Inventory.product_width_id IN (SELECT value_str FROM @product_widthid_list))
					AND ((SELECT COUNT(value_str) FROM @grade_id_list) = 0 OR Inventory.grade_id IN (SELECT value_str FROM @grade_id_list))
					AND ((SELECT COUNT(value_str) FROM @product_storenameid_list) = 0 OR Products.store_name_id IN (SELECT value_str FROM @product_storenameid_list))
			)
	ORDER BY Sales.time_stamp ASC

END
GO
ALTER PROCEDURE [dbo].[sale_charting_detailbyproducts]

	@date_start datetime = NULL, 
	@date_end datetime = NULL,
	@exclude_customer_id uniqueidentifier = NULL,
	@customer_id_list AS Array READONLY,
	@length_unitid_list AS Array READONLY,
	@colorid_list AS Array READONLY,
	@grade_id_list AS Array READONLY,
	@product_storenameid_list AS Array READONLY,
	@product_widthid_list AS Array READONLY,
	@is_reported_only AS bit = 0

AS

BEGIN
 
	-- drop table if already exists
	IF(SELECT object_id('TempDB..#TEMP_SALEITEMS')) IS NOT NULL
		DROP TABLE #TEMP_SALEITEMS
	IF(SELECT object_id('TempDB..#TEMP_GROUPEDSALEITEMS')) IS NOT NULL
		DROP TABLE #TEMP_GROUPEDSALEITEMS
		
	SELECT * INTO #TEMP_SALEITEMS FROM (
		SELECT SaleItems.*,
			Inventory.product_id AS product_id,
			Inventory.grade_id AS grade_id,
			Inventory.buy_price AS buy_price,
			InventoryItems.item_length AS item_length
		FROM SaleItems
			LEFT OUTER JOIN Sales ON Sales.id = SaleItems.sale_id	
			LEFT OUTER JOIN InventoryItems ON InventoryItems.id = SaleItems.inventory_item_id
			LEFT OUTER JOIN Inventory ON Inventory.id = InventoryItems.inventory_id
			LEFT OUTER JOIN Products ON Products.id = Inventory.product_id
			LEFT OUTER JOIN ProductStoreNames ON Products.id = Products.store_name_id
		WHERE 1=1
			AND Sales.Vendors_Id IS NULL
			AND (@date_start IS NULL OR Sales.time_stamp > @date_start)
			AND (@date_end IS NULL OR Sales.time_stamp < @date_end)
			AND ((SELECT COUNT(value_str) FROM @customer_id_list) = 0 OR Sales.customer_id IN (SELECT value_str FROM @customer_id_list))
			AND (@exclude_customer_id IS NULL OR Sales.customer_id <> @exclude_customer_id)
			AND (@is_reported_only = 0 OR (@is_reported_only = 1 AND Sales.is_reported = 1))
			AND SaleItems.return_id IS NULL 
			AND ((SELECT COUNT(value_str) FROM @length_unitid_list) = 0 OR Inventory.length_unit_id IN (SELECT value_str FROM @length_unitid_list))
			AND ((SELECT COUNT(value_str) FROM @colorid_list) = 0 OR Inventory.color_id IN (SELECT value_str FROM @colorid_list))
			AND ((SELECT COUNT(value_str) FROM @product_widthid_list) = 0 OR Inventory.product_width_id IN (SELECT value_str FROM @product_widthid_list))
			AND ((SELECT COUNT(value_str) FROM @grade_id_list) = 0 OR Inventory.grade_id IN (SELECT value_str FROM @grade_id_list))
			AND ((SELECT COUNT(value_str) FROM @product_storenameid_list) = 0 OR Products.store_name_id IN (SELECT value_str FROM @product_storenameid_list))
	) AS x

	SELECT * INTO #TEMP_GROUPEDSALEITEMS FROM (
		SELECT #TEMP_SALEITEMS.product_id AS product_id, #TEMP_SALEITEMS.grade_id AS grade_id,
			SUM(#TEMP_SALEITEMS.buy_price * #TEMP_SALEITEMS.item_length) AS buy_amount,
			SUM((#TEMP_SALEITEMS.sell_price + #TEMP_SALEITEMS.adjustment) * #TEMP_SALEITEMS.item_length) AS sale_amount,
			COUNT(#TEMP_SALEITEMS.item_length) AS sale_pcs,
			SUM(#TEMP_SALEITEMS.item_length) AS sale_length
		FROM #TEMP_SALEITEMS
		GROUP BY #TEMP_SALEITEMS.product_id, #TEMP_SALEITEMS.grade_id
	) AS x

	SELECT #TEMP_GROUPEDSALEITEMS.*,
		ProductStoreNames.name AS product_name,
		Grades.grade_name AS grade_name,
		COALESCE(#TEMP_GROUPEDSALEITEMS.sale_amount,0) - COALESCE(#TEMP_GROUPEDSALEITEMS.buy_amount,0) AS profit_amount,
		IIF(COALESCE(#TEMP_GROUPEDSALEITEMS.buy_amount,0) = 0,1,(COALESCE(#TEMP_GROUPEDSALEITEMS.sale_amount,0) - COALESCE(#TEMP_GROUPEDSALEITEMS.buy_amount,0)) / COALESCE(#TEMP_GROUPEDSALEITEMS.buy_amount,0)) * 100 AS profit_percent
	FROM #TEMP_GROUPEDSALEITEMS
		LEFT OUTER JOIN Products ON Products.id = #TEMP_GROUPEDSALEITEMS.product_id
		LEFT OUTER JOIN ProductStoreNames ON ProductStoreNames.id = Products.store_name_id
		LEFT OUTER JOIN Grades ON Grades.id = #TEMP_GROUPEDSALEITEMS.grade_id
	ORDER BY ProductStoreNames.name ASC

	-- clean up
	DROP TABLE #TEMP_SALEITEMS	
	DROP TABLE #TEMP_GROUPEDSALEITEMS
END
GO
ALTER PROCEDURE [dbo].[sale_charting_detailbycustomers]

	@date_start datetime = NULL, 
	@date_end datetime = NULL,
	@exclude_customer_id uniqueidentifier = NULL,
	@customer_id_list AS Array READONLY,
	@length_unitid_list AS Array READONLY,
	@colorid_list AS Array READONLY,
	@grade_id_list AS Array READONLY,
	@product_storenameid_list AS Array READONLY,
	@product_widthid_list AS Array READONLY,
	@is_reported_only AS bit = 0

AS

BEGIN
 
	-- drop table if already exists
	IF(SELECT object_id('TempDB..#TEMP_SALEITEMS')) IS NOT NULL
		DROP TABLE #TEMP_SALEITEMS
	IF(SELECT object_id('TempDB..#TEMP_GROUPEDSALEITEMS')) IS NOT NULL
		DROP TABLE #TEMP_GROUPEDSALEITEMS
		
	SELECT * INTO #TEMP_SALEITEMS FROM (
		SELECT SaleItems.*,
			Sales.customer_id AS customer_id,
			Inventory.product_id AS product_id,
			Inventory.grade_id AS grade_id,
			Inventory.buy_price AS buy_price,
			InventoryItems.item_length AS item_length
		FROM SaleItems
			LEFT OUTER JOIN Sales ON Sales.id = SaleItems.sale_id	
			LEFT OUTER JOIN InventoryItems ON InventoryItems.id = SaleItems.inventory_item_id
			LEFT OUTER JOIN Inventory ON Inventory.id = InventoryItems.inventory_id
			LEFT OUTER JOIN Products ON Products.id = Inventory.product_id
			LEFT OUTER JOIN ProductStoreNames ON Products.id = Products.store_name_id
		WHERE 1=1
			AND Sales.Vendors_Id IS NULL
			AND (@date_start IS NULL OR Sales.time_stamp > @date_start)
			AND (@date_end IS NULL OR Sales.time_stamp < @date_end)
			AND ((SELECT COUNT(value_str) FROM @customer_id_list) = 0 OR Sales.customer_id IN (SELECT value_str FROM @customer_id_list))
			AND (@exclude_customer_id IS NULL OR Sales.customer_id <> @exclude_customer_id)
			AND (@is_reported_only = 0 OR (@is_reported_only = 1 AND Sales.is_reported = 1))
			AND SaleItems.return_id IS NULL 
			AND ((SELECT COUNT(value_str) FROM @length_unitid_list) = 0 OR Inventory.length_unit_id IN (SELECT value_str FROM @length_unitid_list))
			AND ((SELECT COUNT(value_str) FROM @colorid_list) = 0 OR Inventory.color_id IN (SELECT value_str FROM @colorid_list))
			AND ((SELECT COUNT(value_str) FROM @product_widthid_list) = 0 OR Inventory.product_width_id IN (SELECT value_str FROM @product_widthid_list))
			AND ((SELECT COUNT(value_str) FROM @grade_id_list) = 0 OR Inventory.grade_id IN (SELECT value_str FROM @grade_id_list))
			AND ((SELECT COUNT(value_str) FROM @product_storenameid_list) = 0 OR Products.store_name_id IN (SELECT value_str FROM @product_storenameid_list))
	) AS x

	SELECT * INTO #TEMP_GROUPEDSALEITEMS FROM (
		SELECT 
			#TEMP_SALEITEMS.customer_id AS customer_id,
			SUM(#TEMP_SALEITEMS.buy_price * #TEMP_SALEITEMS.item_length) AS buy_amount,
			SUM((#TEMP_SALEITEMS.sell_price + #TEMP_SALEITEMS.adjustment) * #TEMP_SALEITEMS.item_length) AS sale_amount,
			COUNT(#TEMP_SALEITEMS.item_length) AS sale_pcs,
			SUM(#TEMP_SALEITEMS.item_length) AS sale_length
		FROM #TEMP_SALEITEMS
		GROUP BY #TEMP_SALEITEMS.customer_id
	) AS x

	SELECT #TEMP_GROUPEDSALEITEMS.*,
		Customers.id AS customer_id,
		Customers.customer_name AS customer_name,
		COALESCE(#TEMP_GROUPEDSALEITEMS.sale_amount,0) - COALESCE(#TEMP_GROUPEDSALEITEMS.buy_amount,0) AS profit_amount,
		IIF(COALESCE(#TEMP_GROUPEDSALEITEMS.buy_amount,0) = 0,1,(COALESCE(#TEMP_GROUPEDSALEITEMS.sale_amount,0) - COALESCE(#TEMP_GROUPEDSALEITEMS.buy_amount,0)) / COALESCE(#TEMP_GROUPEDSALEITEMS.buy_amount,0)) * 100 AS profit_percent
	FROM #TEMP_GROUPEDSALEITEMS
		LEFT OUTER JOIN Customers ON Customers.id = #TEMP_GROUPEDSALEITEMS.customer_id
	ORDER BY Customers.customer_name ASC

	-- clean up
	DROP TABLE #TEMP_SALEITEMS	
	DROP TABLE #TEMP_GROUPEDSALEITEMS
END
GO
ALTER PROCEDURE [dbo].[sale_charting_detail]

	@date_start datetime = NULL, 
	@date_end datetime = NULL,
	@exclude_customer_id uniqueidentifier = NULL,
	@customer_id_list AS Array READONLY,
	@length_unitid_list AS Array READONLY,
	@colorid_list AS Array READONLY,
	@grade_id_list AS Array READONLY,
	@product_storenameid_list AS Array READONLY,
	@product_widthid_list AS Array READONLY,
	@is_reported_only AS bit = 0

AS

BEGIN
 
	SELECT Sales.id AS sale_id, Sales.time_stamp, RIGHT(CONVERT(NVARCHAR(10), CONVERT(VARBINARY(8), Sales.barcode), 1),5) AS barcode,
			Customers.customer_name AS customer_name,
			SaleItems.sale_amount AS sale_amount,
			SaleItems.sale_pcs AS sale_pcs,
			SaleItems.sale_length AS sale_length,
			COALESCE(SaleItems.sale_amount,0) - COALESCE(SaleItems.buy_amount,0) AS profit,
			IIF(COALESCE(SaleItems.buy_amount,0) = 0,1,(COALESCE(SaleItems.sale_amount,0) - COALESCE(SaleItems.buy_amount,0)) / COALESCE(SaleItems.buy_amount,0)) * 100 AS profit_percent
	FROM Sales 
		LEFT OUTER JOIN Customers ON Customers.id = Sales.customer_id
		LEFT OUTER JOIN Transports ON Transports.id = Sales.transport_id
		LEFT OUTER JOIN (
			SELECT SaleItems.sale_id,
					SUM(Inventory.buy_price * InventoryItems.item_length) AS buy_amount,
					SUM((SaleItems.sell_price + SaleItems.adjustment) * InventoryItems.item_length) AS sale_amount,
					COUNT(InventoryItems.item_length) AS sale_pcs,
					SUM(InventoryItems.item_length) AS sale_length
			FROM SaleItems
				LEFT OUTER JOIN InventoryItems ON InventoryItems.id = SaleItems.inventory_item_id
				LEFT OUTER JOIN Inventory ON Inventory.id = InventoryItems.inventory_id
				LEFT OUTER JOIN Products ON Products.id = Inventory.product_id
			WHERE return_id IS NULL 
				AND ((SELECT COUNT(value_str) FROM @length_unitid_list) = 0 OR Inventory.length_unit_id IN (SELECT value_str FROM @length_unitid_list))
				AND ((SELECT COUNT(value_str) FROM @colorid_list) = 0 OR Inventory.color_id IN (SELECT value_str FROM @colorid_list))
				AND ((SELECT COUNT(value_str) FROM @grade_id_list) = 0 OR Inventory.grade_id IN (SELECT value_str FROM @grade_id_list))
				AND ((SELECT COUNT(value_str) FROM @product_storenameid_list) = 0 OR Products.store_name_id IN (SELECT value_str FROM @product_storenameid_list))
				AND ((SELECT COUNT(value_str) FROM @product_widthid_list) = 0 OR Inventory.product_width_id IN (SELECT value_str FROM @product_widthid_list))
			GROUP BY SaleItems.sale_id
			) SaleItems ON SaleItems.sale_id = Sales.id
	WHERE 1=1
		AND Sales.Vendors_Id IS NULL
		AND (@date_start IS NULL OR Sales.time_stamp > @date_start)
		AND (@date_end IS NULL OR Sales.time_stamp < @date_end)
		AND ((SELECT COUNT(value_str) FROM @customer_id_list) = 0 OR Sales.customer_id IN (SELECT value_str FROM @customer_id_list))
		AND (@exclude_customer_id IS NULL OR Sales.customer_id <> @exclude_customer_id)
		AND (@is_reported_only = 0 OR (@is_reported_only = 1 AND Sales.is_reported = 1))
		AND Sales.id IN (
				SELECT DISTINCT(SaleItems.sale_id)
				FROM SaleItems
					LEFT OUTER JOIN InventoryItems ON InventoryItems.id = SaleItems.inventory_item_id
					LEFT OUTER JOIN Inventory ON Inventory.id = InventoryItems.inventory_id
					LEFT OUTER JOIN Products ON Products.id = Inventory.product_id
				WHERE return_id IS NULL 
					AND ((SELECT COUNT(value_str) FROM @length_unitid_list) = 0 OR Inventory.length_unit_id IN (SELECT value_str FROM @length_unitid_list))
					AND ((SELECT COUNT(value_str) FROM @colorid_list) = 0 OR Inventory.color_id IN (SELECT value_str FROM @colorid_list))
					AND ((SELECT COUNT(value_str) FROM @product_widthid_list) = 0 OR Inventory.product_width_id IN (SELECT value_str FROM @product_widthid_list))
					AND ((SELECT COUNT(value_str) FROM @grade_id_list) = 0 OR Inventory.grade_id IN (SELECT value_str FROM @grade_id_list))
					AND ((SELECT COUNT(value_str) FROM @product_storenameid_list) = 0 OR Products.store_name_id IN (SELECT value_str FROM @product_storenameid_list))
			)
	ORDER BY Sales.time_stamp ASC

END
GO
ALTER PROCEDURE [dbo].[sale_charting_bycustomers]

	@date_start datetime = NULL,
	@date_end datetime = NULL, 
	@exclude_customer_id uniqueidentifier = NULL,
	@customer_id_list AS Array READONLY,
	@grade_id_list AS Array READONLY,
	@product_storenameid_list AS Array READONLY,
	@product_widthid_list AS Array READONLY,
	@length_unitid_list AS Array READONLY,
	@colorid_list AS Array READONLY,
	@is_reported_only AS bit = 0

AS 

BEGIN

	-- drop table if already exists
	IF(SELECT object_id('TempDB..#TEMP_SALEITEMS')) IS NOT NULL
		DROP TABLE #TEMP_SALEITEMS
		
	SELECT * INTO #TEMP_SALEITEMS FROM (
		SELECT 
			summarytable.customer_id AS customer_id,
			SUM(summarytable.sale_qty) AS sale_length,
			SUM(summarytable.sale_total) AS sale_amount, 
			SUM(summarytable.profit) AS profit_amount,
			(SUM(summarytable.profit) / NULLIF(SUM(summarytable.sale_total) - SUM(summarytable.profit),0) * 100) AS profit_percent
		FROM (
				SELECT Sales.time_stamp,
					Sales.customer_id,
					SaleItems.sell_price, SaleItems.adjustment,
					InventoryItems.item_length AS sale_qty,
					(COALESCE(SaleItems.sell_price,0) + COALESCE(SaleItems.adjustment,0)) * COALESCE(InventoryItems.item_length,0) AS sale_total,
					COALESCE(Inventory.buy_price,0) AS buy_price,
					(COALESCE(SaleItems.sell_price,0) + COALESCE(SaleItems.adjustment,0) - COALESCE(Inventory.buy_price,0)) * COALESCE(InventoryItems.item_length,0) AS profit
				FROM SaleItems 
					left outer join Sales ON Sales.id = SaleItems.sale_id
					left outer join InventoryItems ON InventoryItems.id = SaleItems.inventory_item_id
					LEFT OUTER JOIN Inventory ON Inventory.id = InventoryItems.inventory_id
					LEFT OUTER JOIN Products ON Products.id = Inventory.product_id
				WHERE return_id IS NULL AND Sales.Vendors_Id IS NULL
					AND (@date_start IS NULL OR time_stamp > @date_start)
					AND (@date_end IS NULL OR time_stamp < @date_end)
					AND (@exclude_customer_id IS NULL OR Sales.customer_id <> @exclude_customer_id)
					AND ((SELECT COUNT(value_str) FROM @customer_id_list) = 0 OR Sales.customer_id IN (SELECT value_str FROM @customer_id_list))
					AND ((SELECT COUNT(value_str) FROM @product_widthid_list) = 0 OR Inventory.product_width_id IN (SELECT value_str FROM @product_widthid_list))
					AND ((SELECT COUNT(value_str) FROM @length_unitid_list) = 0 OR Inventory.length_unit_id IN (SELECT value_str FROM @length_unitid_list))
					AND ((SELECT COUNT(value_str) FROM @colorid_list) = 0 OR Inventory.color_id IN (SELECT value_str FROM @colorid_list))
					AND ((SELECT COUNT(value_str) FROM @grade_id_list) = 0 OR Inventory.grade_id IN (SELECT value_str FROM @grade_id_list))
					AND ((SELECT COUNT(value_str) FROM @product_storenameid_list) = 0 OR Products.store_name_id IN (SELECT value_str FROM @product_storenameid_list))
					AND (@is_reported_only = 0 OR (@is_reported_only = 1 AND Sales.is_reported = 1))
			) summarytable
		GROUP BY summarytable.customer_id
	) AS x
	
	SELECT #TEMP_SALEITEMS.*,
		Customers.customer_name AS customer_name
	FROM #TEMP_SALEITEMS
		LEFT OUTER JOIN Customers ON Customers.id = #TEMP_SALEITEMS.customer_id
	ORDER BY Customers.customer_name ASC
	
	-- clean up
	DROP TABLE #TEMP_SALEITEMS	
END
GO
ALTER PROCEDURE [dbo].[sale_charting]

	@date_start datetime = NULL,
	@date_end datetime = NULL, 
	@exclude_customer_id uniqueidentifier = NULL,
	@customer_id_list AS Array READONLY,
	@grade_id_list AS Array READONLY,
	@product_storenameid_list AS Array READONLY,
	@product_widthid_list AS Array READONLY,
	@length_unitid_list AS Array READONLY,
	@colorid_list AS Array READONLY,
	@is_reported_only AS bit = 0

AS 

BEGIN

	SELECT summarytable.sale_year_month as sale_year_month,
			SUM(summarytable.sale_qty) AS sale_qty,
			SUM(summarytable.sale_total) AS sale_total, 
			SUM(summarytable.profit) AS profit,
			COALESCE(SUM(summarytable.profit) / NULLIF(SUM(summarytable.sale_total) - SUM(summarytable.profit),0),0) * 100 AS sale_profit_percent
	FROM (
		SELECT Sales.time_stamp,
			CAST(YEAR(Sales.time_stamp) AS VARCHAR(4)) + '-' + (SELECT RIGHT('00' + CAST(MONTH(Sales.time_stamp) AS VARCHAR(2)),2)) AS sale_year_month,
			SaleItems.sell_price, SaleItems.adjustment,
			InventoryItems.item_length AS sale_qty,
			(COALESCE(SaleItems.sell_price,0) + COALESCE(SaleItems.adjustment,0)) * COALESCE(InventoryItems.item_length,0) AS sale_total,
			COALESCE(Inventory.buy_price,0) AS buy_price,
			(COALESCE(SaleItems.sell_price,0) + COALESCE(SaleItems.adjustment,0) - COALESCE(Inventory.buy_price,0)) * COALESCE(InventoryItems.item_length,0) AS profit
		FROM SaleItems 
			left outer join Sales ON Sales.id = SaleItems.sale_id
			left outer join InventoryItems ON InventoryItems.id = SaleItems.inventory_item_id
			LEFT OUTER JOIN Inventory ON Inventory.id = InventoryItems.inventory_id
			LEFT OUTER JOIN Products ON Products.id = Inventory.product_id
		WHERE return_id IS NULL AND Sales.Vendors_Id IS NULL
			AND (@date_start IS NULL OR time_stamp > @date_start)
			AND (@date_end IS NULL OR time_stamp < @date_end)
			AND (@exclude_customer_id IS NULL OR Sales.customer_id <> @exclude_customer_id)
			AND ((SELECT COUNT(value_str) FROM @customer_id_list) = 0 OR Sales.customer_id IN (SELECT value_str FROM @customer_id_list))
			AND ((SELECT COUNT(value_str) FROM @product_widthid_list) = 0 OR Inventory.product_width_id IN (SELECT value_str FROM @product_widthid_list))
			AND ((SELECT COUNT(value_str) FROM @length_unitid_list) = 0 OR Inventory.length_unit_id IN (SELECT value_str FROM @length_unitid_list))
			AND ((SELECT COUNT(value_str) FROM @colorid_list) = 0 OR Inventory.color_id IN (SELECT value_str FROM @colorid_list))
			AND ((SELECT COUNT(value_str) FROM @grade_id_list) = 0 OR Inventory.grade_id IN (SELECT value_str FROM @grade_id_list))
			AND ((SELECT COUNT(value_str) FROM @product_storenameid_list) = 0 OR Products.store_name_id IN (SELECT value_str FROM @product_storenameid_list))
			AND (@is_reported_only = 0 OR (@is_reported_only = 1 AND Sales.is_reported = 1))
	) summarytable
	GROUP BY summarytable.sale_year_month
	ORDER BY summarytable.sale_year_month ASC

END
GO
ALTER PROCEDURE [dbo].[poitem_get_incomplete]

	@status_completed tinyint,
	@status_cancelled tinyint  

AS

BEGIN

	SELECT POItems.*,
		POs.po_no AS po_no,
		POs.time_stamp AS timestamp,
		COALESCE(POItems.qty,0) * COALESCE(price_per_unit,0) AS subtotal,
		COALESCE(ReceivedInventory.total_length,0) AS received_qty,
		DATEDIFF(DAY, POs.time_stamp, CURRENT_TIMESTAMP) AS Age,
		POItems.price_per_unit * IIF(COALESCE(POItems.qty,0) - COALESCE(ReceivedInventory.total_length,0) < 0, 0, COALESCE(POItems.qty,0) - COALESCE(ReceivedInventory.total_length,0)) AS pendingqtyvalue,
		IIF(COALESCE(POItems.qty,0) - COALESCE(ReceivedInventory.total_length,0) < 0, 0, COALESCE(POItems.qty,0) - COALESCE(ReceivedInventory.total_length,0)) AS pendingqty,
		IIF(POItems.ExpectedDeliveryDate IS NULL, NULL, DATEDIFF(day, CURRENT_TIMESTAMP, POItems.ExpectedDeliveryDate)) AS ExpectedDeliveryDayCount,
		SaleOrders.CustomerPONo AS CustomerPONo,
		Customers.customer_name AS Customers_Name
	FROM POItems 
		LEFT OUTER JOIN (
				SELECT Inventory.po_item_id, SUM(InventoryItems.item_length) AS total_length
				FROM InventoryItems
					LEFT OUTER JOIN Inventory ON Inventory.id = InventoryItems.inventory_id
				WHERE Inventory.po_item_id IS NOT NULL 
					AND InventoryItems.id NOT IN (SELECT inventory_item_id FROM SaleItems LEFT OUTER JOIN Sales ON Sales.id = SaleItems.sale_id WHERE Sales.Vendors_Id IS NOT NULL)
				GROUP BY Inventory.po_item_id
			) 
			ReceivedInventory ON ReceivedInventory.po_item_id = POItems.id
		LEFT OUTER JOIN POs ON POs.id = POItems.po_id
		LEFT OUTER JOIN SaleOrderItems ON SaleOrderItems.Id = POItems.SaleOrderItems_Id
		LEFT OUTER JOIN SaleOrders ON SaleOrders.Id = SaleOrderItems.SaleOrders_Id
		LEFT OUTER JOIN Customers ON Customers.id = SaleOrders.Customers_Id
	WHERE POItems.status_enum_id <> @status_completed AND POItems.status_enum_id <> @status_cancelled
	ORDER BY POs.time_stamp ASC

END
GO
ALTER PROCEDURE [dbo].[poitem_get_by_SaleOrderItems_Id]

	@FILTER_SaleOrderItems_Id uniqueidentifier = NULL

AS

BEGIN

	SELECT POItems.*, 
		POs.po_no, POs.time_stamp, POs.id AS po_id, POs.time_stamp AS timestamp,
		IIF(COALESCE(POItems.qty,0) - COALESCE(ReceivedInventory.total_length,0) < 0, 0, COALESCE(POItems.qty,0) - COALESCE(ReceivedInventory.total_length,0)) AS pendingqty,
		COALESCE(ReceivedInventory.total_length,0) AS received_qty
	FROM POItems
		LEFT OUTER JOIN POs ON POs.id = POItems.po_id
		LEFT OUTER JOIN (
				SELECT Inventory.po_item_id, SUM(InventoryItems.item_length) AS total_length
				FROM InventoryItems
					LEFT OUTER JOIN Inventory ON Inventory.id = InventoryItems.inventory_id
				WHERE Inventory.po_item_id IS NOT NULL 
					AND InventoryItems.id NOT IN (SELECT inventory_item_id FROM SaleItems LEFT OUTER JOIN Sales ON Sales.id = SaleItems.sale_id WHERE Sales.Vendors_Id IS NOT NULL)
				GROUP BY Inventory.po_item_id
			) 
			ReceivedInventory ON ReceivedInventory.po_item_id = POItems.id
	WHERE POItems.SaleOrderItems_Id = @FILTER_SaleOrderItems_Id

END
GO
ALTER PROCEDURE [dbo].[poitem_get_by_poid]

	@po_id uniqueidentifier, 
	@status_completed tinyint,
	@status_cancelled tinyint  

AS

BEGIN

	SELECT POItems.*,
		POs.time_stamp AS timestamp,
		COALESCE(qty,0) * COALESCE(price_per_unit,0) AS subtotal,
		COALESCE(ReceivedInventory.total_length,0) AS received_qty,
		DATEDIFF(DAY, POs.time_stamp, CURRENT_TIMESTAMP) AS Age,
		0 AS pendingqtyvalue
	FROM POItems 
		LEFT OUTER JOIN (
				SELECT Inventory.po_item_id, SUM(InventoryItems.item_length) AS total_length
				FROM Inventory
					LEFT OUTER JOIN InventoryItems ON InventoryItems.inventory_id = Inventory.id
				WHERE Inventory.po_item_id IS NOT NULL
					AND InventoryItems.id NOT IN (SELECT inventory_item_id FROM SaleItems LEFT OUTER JOIN Sales ON Sales.id = SaleItems.sale_id WHERE Sales.Vendors_Id IS NOT NULL)
				GROUP BY Inventory.po_item_id
			) 
			ReceivedInventory ON ReceivedInventory.po_item_id = POItems.id
		LEFT OUTER JOIN POs ON POs.id = POItems.po_id
	WHERE po_id = @po_id 
	ORDER BY line_no ASC

END
GO
ALTER PROCEDURE [dbo].[inventorystocklevel_get_byFilter]

	@product_id uniqueidentifier = NULL,
	@grade_id uniqueidentifier = NULL,
	@product_width_id uniqueidentifier = NULL,
	@length_unit_id uniqueidentifier = NULL,
	@color_id uniqueidentifier = NULL,
	@vendor_id uniqueidentifier = NULL,
	@status_completed tinyint,
	@status_cancelled tinyint,
	@has_neworderqty_only bit = 0

AS

BEGIN

	SELECT InventoryStockLevels.*,
			ProductStoreNames.id AS store_name_id,
			ProductStoreNames.name AS store_name,
			ProductWidths.product_width_name AS width_name,
			LengthUnits.length_unit_name AS length_unit_name, 
			Grades.grade_name AS grade_name,
			Colors.color_name AS color_name,
			Vendors.vendor_name AS vendor_name,
			LastOrdered.id AS last_order_inventory_id,
			LastOrdered.receive_date AS last_order_timestamp,
			CONVERT(INT, COALESCE(InventoryCount.total_length, 0) - COALESCE(InventorySold.total_length, 0)) AS remainingstock_qty,
			CONVERT(INT, COALESCE(Orders.pendingdelivery_length, 0)) AS pendingdelivery_qty,
			IIF(InventoryStockLevels.order_lot_qty = 0 OR InventoryStockLevels.qty - (COALESCE(InventoryCount.total_length, 0) - COALESCE(InventorySold.total_length, 0)) - COALESCE(Orders.pendingdelivery_length, 0) < 0, 0,
			CEILING((InventoryStockLevels.qty - (COALESCE(InventoryCount.total_length, 0) - COALESCE(InventorySold.total_length, 0)) - COALESCE(Orders.pendingdelivery_length, 0))/InventoryStockLevels.order_lot_qty) * InventoryStockLevels.order_lot_qty) AS new_order_qty
	FROM InventoryStockLevels
		LEFT OUTER JOIN Products ON Products.id = InventoryStockLevels.product_id
		LEFT OUTER JOIN ProductStoreNames ON ProductStoreNames.id = Products.store_name_id
		LEFT OUTER JOIN Vendors ON Vendors.id = Products.vendor_id
		LEFT OUTER JOIN ProductWidths ON ProductWidths.id = InventoryStockLevels.product_width_id
		LEFT OUTER JOIN LengthUnits ON LengthUnits.id = InventoryStockLevels.length_unit_id
		LEFT OUTER JOIN Grades ON Grades.id = InventoryStockLevels.grade_id
		LEFT OUTER JOIN Colors ON Colors.id = InventoryStockLevels.color_id
		LEFT OUTER JOIN (
				SELECT Inventory.product_id, Inventory.product_width_id, Inventory.length_unit_id, Inventory.color_id, Inventory.grade_id,
					SUM(InventoryItems.item_length) AS total_length
				FROM InventoryItems
					LEFT OUTER JOIN Inventory ON Inventory.id = InventoryItems.inventory_id			
				WHERE InventoryItems.id NOT IN (SELECT SaleItems.inventory_item_id FROM SaleItems LEFT OUTER JOIN Sales ON Sales.id = SaleItems.sale_id WHERE Sales.Vendors_Id IS NOT NULL)
				GROUP BY Inventory.product_id, Inventory.product_width_id, Inventory.length_unit_id, Inventory.color_id, Inventory.grade_id
			) InventoryCount ON InventoryCount.product_id = InventoryStockLevels.product_id
								AND  InventoryCount.product_width_id = InventoryStockLevels.product_width_id
								AND  InventoryCount.length_unit_id = InventoryStockLevels.length_unit_id
								AND  InventoryCount.color_id = InventoryStockLevels.color_id
								AND  InventoryCount.grade_id = InventoryStockLevels.grade_id
		LEFT OUTER JOIN (
				SELECT Inventory.product_id, Inventory.product_width_id, Inventory.length_unit_id, Inventory.color_id, Inventory.grade_id,
					SUM(InventoryItems.item_length) AS total_length
				FROM SaleItems
					LEFT OUTER JOIN InventoryItems ON InventoryItems.id = SaleItems.inventory_item_id
					LEFT OUTER JOIN Inventory ON Inventory.id = InventoryItems.inventory_id
				WHERE SaleItems.return_id is null
					AND SaleItems.inventory_item_id NOT IN (SELECT SaleItems.inventory_item_id 
															FROM SaleItems LEFT OUTER JOIN Sales ON Sales.id = SaleItems.sale_id 
															WHERE Sales.Vendors_Id IS NOT NULL)
				GROUP BY Inventory.product_id, Inventory.product_width_id, Inventory.length_unit_id, Inventory.color_id, Inventory.grade_id
			) InventorySold ON InventorySold.product_id = InventoryStockLevels.product_id
								AND  InventorySold.product_width_id = InventoryStockLevels.product_width_id
								AND  InventorySold.length_unit_id = InventoryStockLevels.length_unit_id
								AND  InventorySold.color_id = InventoryStockLevels.color_id
								AND  InventorySold.grade_id = InventoryStockLevels.grade_id
		LEFT OUTER JOIN (
				SELECT Inventory.product_id, Inventory.product_width_id, Inventory.length_unit_id, Inventory.color_id, Inventory.grade_id,
					SUM(COALESCE(POItems.qty,0) - COALESCE(ReceivedQty.total_length,0)) AS pendingdelivery_length
				FROM POItems
					LEFT OUTER JOIN Inventory ON Inventory.id = POItems.referenced_inventory_id
					LEFT OUTER JOIN (
							SELECT Inventory.po_item_id, SUM(InventoryItems.item_length) AS total_length
							FROM Inventory
								LEFT OUTER JOIN InventoryItems ON InventoryItems.inventory_id = Inventory.id
							WHERE Inventory.po_item_id IS NOT NULL
							GROUP BY Inventory.po_item_id
						) ReceivedQty ON ReceivedQty.po_item_id = POItems.id
				WHERE POItems.status_enum_id <> @status_cancelled AND POItems.status_enum_id <> @status_completed
				GROUP BY Inventory.product_id, Inventory.product_width_id, Inventory.length_unit_id, Inventory.color_id, Inventory.grade_id
			) Orders ON Orders.product_id = InventoryStockLevels.product_id
								AND  Orders.product_width_id = InventoryStockLevels.product_width_id
								AND  Orders.length_unit_id = InventoryStockLevels.length_unit_id
								AND  Orders.color_id = InventoryStockLevels.color_id
								AND  Orders.grade_id = InventoryStockLevels.grade_id
		LEFT OUTER JOIN (
				SELECT Inventory.*
				FROM Inventory 
				WHERE Inventory.receive_date IN (
						SELECT MAX(Inventory.receive_date)
						FROM Inventory
						GROUP BY product_id, product_width_id, length_unit_id, color_id, grade_id
					)
			) LastOrdered ON LastOrdered.product_id = InventoryStockLevels.product_id
								AND  LastOrdered.product_width_id = InventoryStockLevels.product_width_id
								AND  LastOrdered.length_unit_id = InventoryStockLevels.length_unit_id
								AND  LastOrdered.color_id = InventoryStockLevels.color_id
								AND  LastOrdered.grade_id = InventoryStockLevels.grade_id
	WHERE 1=1
		AND (@product_id IS NULL OR InventoryStockLevels.product_id = @product_id)
		AND (@grade_id IS NULL OR InventoryStockLevels.grade_id = @grade_id)
		AND (@product_width_id IS NULL OR InventoryStockLevels.product_width_id = @product_width_id)
		AND (@length_unit_id IS NULL OR InventoryStockLevels.length_unit_id = @length_unit_id)
		AND (@color_id IS NULL OR InventoryStockLevels.color_id = @color_id)
		AND (@vendor_id IS NULL OR Vendors.id = @vendor_id)
		AND (@has_neworderqty_only = 0 OR (@has_neworderqty_only = 1 AND 
			0 < IIF(InventoryStockLevels.qty - (COALESCE(InventoryCount.total_length, 0) - COALESCE(InventorySold.total_length, 0)) - COALESCE(Orders.pendingdelivery_length, 0) < 0, 0,
			CEILING((InventoryStockLevels.qty - (COALESCE(InventoryCount.total_length, 0) - COALESCE(InventorySold.total_length, 0)) - COALESCE(Orders.pendingdelivery_length, 0))/InventoryStockLevels.order_lot_qty) * InventoryStockLevels.order_lot_qty)))
	ORDER BY Vendors.vendor_name ASC, ProductStoreNames.name ASC, Grades.grade_name ASC, ProductWidths.product_width_name ASC, LengthUnits.length_unit_name ASC, Colors.color_name ASC

END
GO
ALTER PROCEDURE [dbo].[financial_get_overview] 

AS

BEGIN

	SELECT InventoryInfo.buy_value AS inventory_buy_value, 
			ReceivableInfo.amount AS receivable_amount
	FROM (
			SELECT 1 AS info_id, 
					SUM((COALESCE(items_count.item_length,0) - COALESCE(solditems_count.item_length,0)) * Inventory.buy_price) AS buy_value
			FROM Inventory
				LEFT OUTER JOIN (SELECT InventoryItems.inventory_id,
										SUM(InventoryItems.item_length) AS item_length 
								 FROM InventoryItems GROUP BY InventoryItems.inventory_id) items_count 
				ON Inventory.id = items_count.inventory_id
				LEFT OUTER JOIN (SELECT sold_inventory_items.inventory_id, 
										SUM(sold_inventory_items.item_length) AS item_length 
								 FROM SaleItems
									 LEFT OUTER JOIN InventoryItems sold_inventory_items ON sold_inventory_items.id = SaleItems.inventory_item_id
								 WHERE SaleItems.return_id IS null
								 GROUP BY sold_inventory_items.inventory_id) solditems_count 
				ON Inventory.id = solditems_count.inventory_id
			WHERE isConsignment = 0
		) InventoryInfo
		LEFT OUTER JOIN (
			SELECT 1 AS info_id, 
					SUM(IIF(Sales.Vendors_Id IS NOT NULL,0,COALESCE(SaleAmount.sale_amount,0) - COALESCE(CompiledPayments.payment_amount,0) + COALESCE(Sales.shipping_cost, 0))) AS amount
			FROM (Sales 
				LEFT OUTER JOIN 
					(SELECT SaleItems.sale_id,
							SUM((SaleItems.sell_price + SaleItems.adjustment) * InventoryItems.item_length) AS sale_amount,
							COUNT(InventoryItems.item_length) AS sale_qty,
							SUM(InventoryItems.item_length) AS sale_length
					FROM SaleItems
						LEFT OUTER JOIN InventoryItems ON InventoryItems.id = SaleItems.inventory_item_id
					GROUP BY SaleItems.sale_id
					) SaleAmount ON SaleAmount.sale_id = Sales.id
				) LEFT OUTER JOIN (SELECT Payments.ReferenceId, 
										SUM(Payments.Amount) AS payment_amount 
									FROM Payments GROUP BY Payments.ReferenceId) CompiledPayments 
				ON CompiledPayments.ReferenceId = Sales.id
		) ReceivableInfo ON ReceivableInfo.info_id = InventoryInfo.info_id

END
GO
