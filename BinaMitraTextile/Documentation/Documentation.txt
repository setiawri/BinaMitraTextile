CREATE TABLE [dbo].[VendorInvoicePayments]
(
	[Id] UNIQUEIDENTIFIER NOT NULL PRIMARY KEY, 
    [Timestamp] DATETIME NOT NULL, 
    [Vendors_Id] UNIQUEIDENTIFIER NOT NULL, 
    [Cancelled] BIT NOT NULL DEFAULT (0),
    [Approved] BIT NOT NULL DEFAULT (0),
    [Notes] VARCHAR(MAX) NULL
)
GO
CREATE TABLE [dbo].[VendorInvoicePaymentItems]
(
	[Id] UNIQUEIDENTIFIER NOT NULL PRIMARY KEY, 
    [VendorInvoicePayments_Id] UNIQUEIDENTIFIER NOT NULL, 
    [VendorInvoices_Id] UNIQUEIDENTIFIER NOT NULL, 
    [PaymentAmount] DECIMAL(12) NOT NULL
)
GO
ALTER PROCEDURE [dbo].[vendorinvoice_get]
	
	@id uniqueidentifier = NULL, 
	@invoice_no varchar(MAX) = NULL,
	@FakturPajaks_Id uniqueidentifier = NULL,
	@FILTER_BrowsingForFakturPajak_Vendors_Id uniqueidentifier = NULL,
	@FILTER_ShowOnlyIncomplete bit = 0,
	@FILTER_ShowOnlyLast3Months bit = 0,
	@status_completed tinyint,
	@status_cancelled tinyint,
	@FILTER_ShowOnlyVendorUsesFakturPajak bit = 0
	
AS

BEGIN

	SELECT VendorInvoices.*,
		Vendors.vendor_name AS VendorName,
		FakturPajaks.No AS FakturPajaks_No,
		FakturPajaks.DPP + FakturPajaks.PPN AS FakturPajaks_Amount,
		VendorInvoices.Amount - (FakturPajaks.DPP + FakturPajaks.PPN) AS AmountDifferenceFromFakturPajaksAmount,
		DATEADD(day, 3 + VendorInvoices.[TOP], VendorInvoices.timestamp) AS pastdue,
		CAST(CASE WHEN DATEADD(day, 3 + VendorInvoices.[TOP], VendorInvoices.timestamp) < CURRENT_TIMESTAMP THEN 1 ELSE 0 END AS BIT) AS is_due,
		CompiledInventory.Amount AS CalculatedAmount,		
		VendorInvoices.Amount - COALESCE(CompiledInventory.Amount,0) AS AmountDifferenceFromCalculated,
		COALESCE(ReturnedToSupplier.Amount,0) AS ReturnedValue,
		VendorInvoices.Amount - COALESCE(ReturnedToSupplier.Amount,0) AS PayableAmount,
		CASE
			WHEN status_enum_id = 0 THEN 'New'
			WHEN status_enum_id = 1 THEN 'Cancelled'
			WHEN status_enum_id = 2 THEN 'Paid Partial'
			WHEN status_enum_id = 3 THEN 'Paid Full'
		END AS status_name
	FROM VendorInvoices
		LEFT OUTER JOIN Vendors ON Vendors.id = VendorInvoices.Vendors_Id
		LEFT OUTER JOIN FakturPajaks ON FakturPajaks.Id = VendorInvoices.FakturPajaks_Id
		LEFT OUTER JOIN (		
				SELECT Inventory.vendorinvoice_id, SUM(CompiledInventoryBuyValue.Amount) AS Amount
				FROM (
						SELECT CompiledInventoryItems.inventory_id, CompiledInventoryItems.total_length * Inventory.buy_price AS Amount
						FROM (
								SELECT InventoryItems.inventory_id, SUM(InventoryItems.item_length) AS total_length
								FROM InventoryItems
									LEFT OUTER JOIN Inventory ON Inventory.id = InventoryItems.inventory_id
									LEFT OUTER JOIN VendorInvoices ON VendorInvoices.id = Inventory.vendorinvoice_id
								WHERE 1=1
									AND (@id IS NULL OR Inventory.vendorinvoice_id = @id)
									AND (@invoice_no IS NULL OR VendorInvoices.invoice_no LIKE '%' + @invoice_no + '%')
									AND (@FakturPajaks_Id IS NULL OR VendorInvoices.FakturPajaks_Id = @FakturPajaks_Id)
								GROUP BY InventoryItems.inventory_id
							) CompiledInventoryItems
							LEFT OUTER JOIN Inventory ON Inventory.id = CompiledInventoryItems.inventory_id
					) CompiledInventoryBuyValue
					LEFT OUTER JOIN Inventory ON Inventory.id = CompiledInventoryBuyValue.inventory_id
				GROUP BY Inventory.vendorinvoice_id
			) CompiledInventory ON CompiledInventory.vendorinvoice_id = VendorInvoices.id
		LEFT OUTER JOIN (
				SELECT VendorInvoices.id,
					SUM(Inventory.buy_price * InventoryItems.item_length) AS buy_amount,
					SUM((SaleItems.sell_price + SaleItems.adjustment) * InventoryItems.item_length) AS Amount,
					COUNT(InventoryItems.item_length) AS sale_qty,
					SUM(InventoryItems.item_length) AS sale_length
				FROM SaleItems
					LEFT OUTER JOIN Sales ON Sales.id = SaleItems.sale_id
					LEFT OUTER JOIN InventoryItems ON InventoryItems.id = SaleItems.inventory_item_id
					LEFT OUTER JOIN Inventory ON Inventory.id = InventoryItems.inventory_id
					LEFT OUTER JOIN VendorInvoices ON VendorInvoices.id = Inventory.vendorinvoice_id
				WHERE Sales.returned_to_supplier = 1 AND Sales.voided = 0
				GROUP BY VendorInvoices.id
			) ReturnedToSupplier ON ReturnedToSupplier.id = VendorInvoices.id
	WHERE 1=1
		AND (@id IS NULL OR VendorInvoices.id = @id)
		AND (@invoice_no IS NULL OR VendorInvoices.invoice_no LIKE '%' + @invoice_no + '%')
		AND (@FakturPajaks_Id IS NULL OR VendorInvoices.FakturPajaks_Id = @FakturPajaks_Id)
		AND (@FILTER_BrowsingForFakturPajak_Vendors_Id IS NULL OR (VendorInvoices.FakturPajaks_Id IS NULL AND VendorInvoices.Vendors_Id = @FILTER_BrowsingForFakturPajak_Vendors_Id))
		AND (@FILTER_ShowOnlyIncomplete = 0 OR (@FILTER_ShowOnlyIncomplete = 1 AND VendorInvoices.status_enum_id <> @status_cancelled AND VendorInvoices.status_enum_id <> @status_completed))
		AND (@FILTER_ShowOnlyLast3Months = 0 OR (@FILTER_ShowOnlyLast3Months = 1 AND VendorInvoices.timestamp > DATEADD(month, -3, GETDATE())))
		AND (@FILTER_ShowOnlyVendorUsesFakturPajak = 0 OR (@FILTER_ShowOnlyVendorUsesFakturPajak = 1 AND Vendors.usesFakturPajak = 1))
	ORDER BY VendorInvoices.invoice_no DESC

END
GO
ALTER PROCEDURE [dbo].[FakturPajaks_get]

	@Id uniqueidentifier = NULL,
	@No varchar(MAX) = NULL,
	@Customers_Id uniqueidentifier = NULL,
	@Vendors_Id uniqueidentifier = NULL,
	@FILTER_StartDate datetime = NULL,
	@FILTER_EndDate datetime = NULL,
	@FILTER_ShowCompleted bit

AS

BEGIN

	SELECT FakturPajaks.*,
		Customers.customer_name AS Customers_Name,
		Vendors.vendor_name AS Vendors_Name,
		FakturPajaks.DPP + FakturPajaks.PPN AS TotalAmount,
		CASE
			WHEN FakturPajaks.Customers_Id IS NOT NULL THEN COALESCE(FakturPajakSales.Total,0) - COALESCE(FakturPajakReturns.Total, 0)
			ELSE COALESCE(FakturPajakVendorInvoices.Total,0) - COALESCE(FakturPajakSales.Total, 0)
		END AS AssignedAmount,
		CASE
			WHEN FakturPajaks.Customers_Id IS NOT NULL THEN (FakturPajaks.DPP + FakturPajaks.PPN) - (COALESCE(FakturPajakSales.Total,0) - COALESCE(FakturPajakReturns.Total, 0))
			ELSE (FakturPajaks.DPP + FakturPajaks.PPN) - (COALESCE(FakturPajakVendorInvoices.Total,0) - COALESCE(FakturPajakSales.Total, 0))
		END AS AmountDifference
	FROM FakturPajaks 
		LEFT OUTER JOIN Customers ON Customers.id = FakturPajaks.Customers_Id
		LEFT OUTER JOIN Vendors ON Vendors.id = FakturPajaks.Vendors_Id
		LEFT OUTER JOIN (
				SELECT VendorInvoices.FakturPajaks_Id, SUM(VendorInvoices.Amount) AS Total
				FROM VendorInvoices
				WHERE VendorInvoices.FakturPajaks_Id IS NOT NULL
				GROUP BY VendorInvoices.FakturPajaks_Id
			) FakturPajakVendorInvoices ON FakturPajakVendorInvoices.FakturPajaks_Id = FakturPajaks.Id
		LEFT OUTER JOIN (
				SELECT Sales.FakturPajaks_Id, SUM(((SaleItems.sell_price + SaleItems.adjustment) * InventoryItems.item_length) + Sales.shipping_cost) AS Total
				FROM SaleItems
					LEFT OUTER JOIN Sales ON Sales.id = SaleItems.sale_id
					LEFT OUTER JOIN InventoryItems ON InventoryItems.id = SaleItems.inventory_item_id
				WHERE Sales.FakturPajaks_Id IS NOT NULL
				GROUP BY Sales.FakturPajaks_Id
			) FakturPajakSales ON FakturPajakSales.FakturPajaks_Id = FakturPajaks.Id
		LEFT OUTER JOIN (
				SELECT SaleReturns.FakturPajaks_Id, SUM((SaleItems.sell_price + SaleItems.adjustment) * InventoryItems.item_length) AS Total
				FROM SaleReturns
					LEFT OUTER JOIN SaleItems ON SaleItems.return_id = SaleReturns.id
					LEFT OUTER JOIN InventoryItems ON InventoryItems.id = SaleItems.inventory_item_id
				WHERE SaleReturns.FakturPajaks_Id IS NOT NULL
				GROUP BY SaleReturns.FakturPajaks_Id
			) FakturPajakReturns ON FakturPajakReturns.FakturPajaks_Id = FakturPajaks.Id
	WHERE 1=1
		AND (@Id IS NULL OR FakturPajaks.Id = @Id)
		AND (@No IS NULL OR FakturPajaks.No LIKE '%'+@No+'%')
		AND (@Customers_Id IS NULL OR FakturPajaks.Customers_Id = @Customers_Id)
		AND (@Vendors_Id IS NULL OR FakturPajaks.Vendors_Id = @Vendors_Id)
		AND (@FILTER_StartDate IS NULL OR FakturPajaks.Timestamp >= @FILTER_StartDate)
		AND (@FILTER_EndDate IS NULL OR FakturPajaks.Timestamp < @FILTER_EndDate)
		AND (@FILTER_ShowCompleted = 1 OR (@FILTER_ShowCompleted = 0 AND FakturPajaks.Completed = 0)) 
	ORDER BY FakturPajaks.Timestamp DESC, FakturPajaks.No DESC

END
GO
